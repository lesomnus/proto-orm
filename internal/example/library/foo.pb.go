// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.0
// source: example/library/foo.proto

package library

import (
	_ "github.com/lesomnus/proto-orm"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FooV struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id      int64                  `protobuf:"varint,1,opt,name=id,proto3"`
	xxx_hidden_VDouble float64                `protobuf:"fixed64,11,opt,name=v_double,json=vDouble,proto3"`
	xxx_hidden_VInt64  int64                  `protobuf:"varint,12,opt,name=v_int64,json=vInt64,proto3"`
	xxx_hidden_VUint64 uint64                 `protobuf:"varint,13,opt,name=v_uint64,json=vUint64,proto3"`
	xxx_hidden_VBool   bool                   `protobuf:"varint,14,opt,name=v_bool,json=vBool,proto3"`
	xxx_hidden_VString string                 `protobuf:"bytes,15,opt,name=v_string,json=vString,proto3"`
	xxx_hidden_VBytes  []byte                 `protobuf:"bytes,16,opt,name=v_bytes,json=vBytes,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FooV) Reset() {
	*x = FooV{}
	mi := &file_example_library_foo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooV) ProtoMessage() {}

func (x *FooV) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooV) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooV) GetVDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VDouble
	}
	return 0
}

func (x *FooV) GetVInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VInt64
	}
	return 0
}

func (x *FooV) GetVUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VUint64
	}
	return 0
}

func (x *FooV) GetVBool() bool {
	if x != nil {
		return x.xxx_hidden_VBool
	}
	return false
}

func (x *FooV) GetVString() string {
	if x != nil {
		return x.xxx_hidden_VString
	}
	return ""
}

func (x *FooV) GetVBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VBytes
	}
	return nil
}

func (x *FooV) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooV) SetVDouble(v float64) {
	x.xxx_hidden_VDouble = v
}

func (x *FooV) SetVInt64(v int64) {
	x.xxx_hidden_VInt64 = v
}

func (x *FooV) SetVUint64(v uint64) {
	x.xxx_hidden_VUint64 = v
}

func (x *FooV) SetVBool(v bool) {
	x.xxx_hidden_VBool = v
}

func (x *FooV) SetVString(v string) {
	x.xxx_hidden_VString = v
}

func (x *FooV) SetVBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VBytes = v
}

type FooV_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id      int64
	VDouble float64
	VInt64  int64
	VUint64 uint64
	VBool   bool
	VString string
	VBytes  []byte
}

func (b0 FooV_builder) Build() *FooV {
	m0 := &FooV{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_VDouble = b.VDouble
	x.xxx_hidden_VInt64 = b.VInt64
	x.xxx_hidden_VUint64 = b.VUint64
	x.xxx_hidden_VBool = b.VBool
	x.xxx_hidden_VString = b.VString
	x.xxx_hidden_VBytes = b.VBytes
	return m0
}

type FooVd struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id       int64                  `protobuf:"varint,1,opt,name=id,proto3"`
	xxx_hidden_VdDouble float64                `protobuf:"fixed64,11,opt,name=vd_double,json=vdDouble,proto3"`
	xxx_hidden_VdInt64  int64                  `protobuf:"varint,12,opt,name=vd_int64,json=vdInt64,proto3"`
	xxx_hidden_VdUint64 uint64                 `protobuf:"varint,13,opt,name=vd_uint64,json=vdUint64,proto3"`
	xxx_hidden_VdBool   bool                   `protobuf:"varint,14,opt,name=vd_bool,json=vdBool,proto3"`
	xxx_hidden_VdString string                 `protobuf:"bytes,15,opt,name=vd_string,json=vdString,proto3"`
	xxx_hidden_VdBytes  []byte                 `protobuf:"bytes,16,opt,name=vd_bytes,json=vdBytes,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FooVd) Reset() {
	*x = FooVd{}
	mi := &file_example_library_foo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVd) ProtoMessage() {}

func (x *FooVd) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVd) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooVd) GetVdDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VdDouble
	}
	return 0
}

func (x *FooVd) GetVdInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VdInt64
	}
	return 0
}

func (x *FooVd) GetVdUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VdUint64
	}
	return 0
}

func (x *FooVd) GetVdBool() bool {
	if x != nil {
		return x.xxx_hidden_VdBool
	}
	return false
}

func (x *FooVd) GetVdString() string {
	if x != nil {
		return x.xxx_hidden_VdString
	}
	return ""
}

func (x *FooVd) GetVdBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VdBytes
	}
	return nil
}

func (x *FooVd) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooVd) SetVdDouble(v float64) {
	x.xxx_hidden_VdDouble = v
}

func (x *FooVd) SetVdInt64(v int64) {
	x.xxx_hidden_VdInt64 = v
}

func (x *FooVd) SetVdUint64(v uint64) {
	x.xxx_hidden_VdUint64 = v
}

func (x *FooVd) SetVdBool(v bool) {
	x.xxx_hidden_VdBool = v
}

func (x *FooVd) SetVdString(v string) {
	x.xxx_hidden_VdString = v
}

func (x *FooVd) SetVdBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VdBytes = v
}

type FooVd_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       int64
	VdDouble float64
	VdInt64  int64
	VdUint64 uint64
	VdBool   bool
	VdString string
	VdBytes  []byte
}

func (b0 FooVd_builder) Build() *FooVd {
	m0 := &FooVd{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_VdDouble = b.VdDouble
	x.xxx_hidden_VdInt64 = b.VdInt64
	x.xxx_hidden_VdUint64 = b.VdUint64
	x.xxx_hidden_VdBool = b.VdBool
	x.xxx_hidden_VdString = b.VdString
	x.xxx_hidden_VdBytes = b.VdBytes
	return m0
}

type FooVr struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id       int64                  `protobuf:"varint,1,opt,name=id,proto3"`
	xxx_hidden_VrDouble []float64              `protobuf:"fixed64,11,rep,packed,name=vr_double,json=vrDouble,proto3"`
	xxx_hidden_VrInt64  []int64                `protobuf:"varint,12,rep,packed,name=vr_int64,json=vrInt64,proto3"`
	xxx_hidden_VrUint64 []uint64               `protobuf:"varint,13,rep,packed,name=vr_uint64,json=vrUint64,proto3"`
	xxx_hidden_VrBool   []bool                 `protobuf:"varint,14,rep,packed,name=vr_bool,json=vrBool,proto3"`
	xxx_hidden_VrString []string               `protobuf:"bytes,15,rep,name=vr_string,json=vrString,proto3"`
	xxx_hidden_VrBytes  [][]byte               `protobuf:"bytes,16,rep,name=vr_bytes,json=vrBytes,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FooVr) Reset() {
	*x = FooVr{}
	mi := &file_example_library_foo_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVr) ProtoMessage() {}

func (x *FooVr) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVr) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooVr) GetVrDouble() []float64 {
	if x != nil {
		return x.xxx_hidden_VrDouble
	}
	return nil
}

func (x *FooVr) GetVrInt64() []int64 {
	if x != nil {
		return x.xxx_hidden_VrInt64
	}
	return nil
}

func (x *FooVr) GetVrUint64() []uint64 {
	if x != nil {
		return x.xxx_hidden_VrUint64
	}
	return nil
}

func (x *FooVr) GetVrBool() []bool {
	if x != nil {
		return x.xxx_hidden_VrBool
	}
	return nil
}

func (x *FooVr) GetVrString() []string {
	if x != nil {
		return x.xxx_hidden_VrString
	}
	return nil
}

func (x *FooVr) GetVrBytes() [][]byte {
	if x != nil {
		return x.xxx_hidden_VrBytes
	}
	return nil
}

func (x *FooVr) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooVr) SetVrDouble(v []float64) {
	x.xxx_hidden_VrDouble = v
}

func (x *FooVr) SetVrInt64(v []int64) {
	x.xxx_hidden_VrInt64 = v
}

func (x *FooVr) SetVrUint64(v []uint64) {
	x.xxx_hidden_VrUint64 = v
}

func (x *FooVr) SetVrBool(v []bool) {
	x.xxx_hidden_VrBool = v
}

func (x *FooVr) SetVrString(v []string) {
	x.xxx_hidden_VrString = v
}

func (x *FooVr) SetVrBytes(v [][]byte) {
	x.xxx_hidden_VrBytes = v
}

type FooVr_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       int64
	VrDouble []float64
	VrInt64  []int64
	VrUint64 []uint64
	VrBool   []bool
	VrString []string
	VrBytes  [][]byte
}

func (b0 FooVr_builder) Build() *FooVr {
	m0 := &FooVr{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_VrDouble = b.VrDouble
	x.xxx_hidden_VrInt64 = b.VrInt64
	x.xxx_hidden_VrUint64 = b.VrUint64
	x.xxx_hidden_VrBool = b.VrBool
	x.xxx_hidden_VrString = b.VrString
	x.xxx_hidden_VrBytes = b.VrBytes
	return m0
}

type FooVo struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id,proto3"`
	xxx_hidden_VoDouble    float64                `protobuf:"fixed64,11,opt,name=vo_double,json=voDouble,proto3,oneof"`
	xxx_hidden_VoInt64     int64                  `protobuf:"varint,12,opt,name=vo_int64,json=voInt64,proto3,oneof"`
	xxx_hidden_VoUint64    uint64                 `protobuf:"varint,13,opt,name=vo_uint64,json=voUint64,proto3,oneof"`
	xxx_hidden_VoBool      bool                   `protobuf:"varint,14,opt,name=vo_bool,json=voBool,proto3,oneof"`
	xxx_hidden_VoString    *string                `protobuf:"bytes,15,opt,name=vo_string,json=voString,proto3,oneof"`
	xxx_hidden_VoBytes     []byte                 `protobuf:"bytes,16,opt,name=vo_bytes,json=voBytes,proto3,oneof"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FooVo) Reset() {
	*x = FooVo{}
	mi := &file_example_library_foo_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVo) ProtoMessage() {}

func (x *FooVo) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVo) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooVo) GetVoDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VoDouble
	}
	return 0
}

func (x *FooVo) GetVoInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VoInt64
	}
	return 0
}

func (x *FooVo) GetVoUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VoUint64
	}
	return 0
}

func (x *FooVo) GetVoBool() bool {
	if x != nil {
		return x.xxx_hidden_VoBool
	}
	return false
}

func (x *FooVo) GetVoString() string {
	if x != nil {
		if x.xxx_hidden_VoString != nil {
			return *x.xxx_hidden_VoString
		}
		return ""
	}
	return ""
}

func (x *FooVo) GetVoBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VoBytes
	}
	return nil
}

func (x *FooVo) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooVo) SetVoDouble(v float64) {
	x.xxx_hidden_VoDouble = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *FooVo) SetVoInt64(v int64) {
	x.xxx_hidden_VoInt64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *FooVo) SetVoUint64(v uint64) {
	x.xxx_hidden_VoUint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *FooVo) SetVoBool(v bool) {
	x.xxx_hidden_VoBool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *FooVo) SetVoString(v string) {
	x.xxx_hidden_VoString = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *FooVo) SetVoBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VoBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *FooVo) HasVoDouble() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FooVo) HasVoInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FooVo) HasVoUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FooVo) HasVoBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FooVo) HasVoString() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FooVo) HasVoBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *FooVo) ClearVoDouble() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_VoDouble = 0
}

func (x *FooVo) ClearVoInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_VoInt64 = 0
}

func (x *FooVo) ClearVoUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_VoUint64 = 0
}

func (x *FooVo) ClearVoBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_VoBool = false
}

func (x *FooVo) ClearVoString() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_VoString = nil
}

func (x *FooVo) ClearVoBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_VoBytes = nil
}

type FooVo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       int64
	VoDouble *float64
	VoInt64  *int64
	VoUint64 *uint64
	VoBool   *bool
	VoString *string
	VoBytes  []byte
}

func (b0 FooVo_builder) Build() *FooVo {
	m0 := &FooVo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	if b.VoDouble != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_VoDouble = *b.VoDouble
	}
	if b.VoInt64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_VoInt64 = *b.VoInt64
	}
	if b.VoUint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_VoUint64 = *b.VoUint64
	}
	if b.VoBool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_VoBool = *b.VoBool
	}
	if b.VoString != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_VoString = b.VoString
	}
	if b.VoBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_VoBytes = b.VoBytes
	}
	return m0
}

type FooVon struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id,proto3"`
	xxx_hidden_VonDouble   float64                `protobuf:"fixed64,11,opt,name=von_double,json=vonDouble,proto3,oneof"`
	xxx_hidden_VonInt64    int64                  `protobuf:"varint,12,opt,name=von_int64,json=vonInt64,proto3,oneof"`
	xxx_hidden_VonUint64   uint64                 `protobuf:"varint,13,opt,name=von_uint64,json=vonUint64,proto3,oneof"`
	xxx_hidden_VonBool     bool                   `protobuf:"varint,14,opt,name=von_bool,json=vonBool,proto3,oneof"`
	xxx_hidden_VonString   *string                `protobuf:"bytes,15,opt,name=von_string,json=vonString,proto3,oneof"`
	xxx_hidden_VonBytes    []byte                 `protobuf:"bytes,16,opt,name=von_bytes,json=vonBytes,proto3,oneof"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FooVon) Reset() {
	*x = FooVon{}
	mi := &file_example_library_foo_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVon) ProtoMessage() {}

func (x *FooVon) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVon) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooVon) GetVonDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VonDouble
	}
	return 0
}

func (x *FooVon) GetVonInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VonInt64
	}
	return 0
}

func (x *FooVon) GetVonUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VonUint64
	}
	return 0
}

func (x *FooVon) GetVonBool() bool {
	if x != nil {
		return x.xxx_hidden_VonBool
	}
	return false
}

func (x *FooVon) GetVonString() string {
	if x != nil {
		if x.xxx_hidden_VonString != nil {
			return *x.xxx_hidden_VonString
		}
		return ""
	}
	return ""
}

func (x *FooVon) GetVonBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VonBytes
	}
	return nil
}

func (x *FooVon) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooVon) SetVonDouble(v float64) {
	x.xxx_hidden_VonDouble = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *FooVon) SetVonInt64(v int64) {
	x.xxx_hidden_VonInt64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *FooVon) SetVonUint64(v uint64) {
	x.xxx_hidden_VonUint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *FooVon) SetVonBool(v bool) {
	x.xxx_hidden_VonBool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *FooVon) SetVonString(v string) {
	x.xxx_hidden_VonString = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *FooVon) SetVonBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VonBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *FooVon) HasVonDouble() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FooVon) HasVonInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FooVon) HasVonUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FooVon) HasVonBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FooVon) HasVonString() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FooVon) HasVonBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *FooVon) ClearVonDouble() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_VonDouble = 0
}

func (x *FooVon) ClearVonInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_VonInt64 = 0
}

func (x *FooVon) ClearVonUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_VonUint64 = 0
}

func (x *FooVon) ClearVonBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_VonBool = false
}

func (x *FooVon) ClearVonString() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_VonString = nil
}

func (x *FooVon) ClearVonBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_VonBytes = nil
}

type FooVon_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        int64
	VonDouble *float64
	VonInt64  *int64
	VonUint64 *uint64
	VonBool   *bool
	VonString *string
	VonBytes  []byte
}

func (b0 FooVon_builder) Build() *FooVon {
	m0 := &FooVon{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	if b.VonDouble != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_VonDouble = *b.VonDouble
	}
	if b.VonInt64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_VonInt64 = *b.VonInt64
	}
	if b.VonUint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_VonUint64 = *b.VonUint64
	}
	if b.VonBool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_VonBool = *b.VonBool
	}
	if b.VonString != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_VonString = b.VonString
	}
	if b.VonBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_VonBytes = b.VonBytes
	}
	return m0
}

type FooMi struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id        int64                  `protobuf:"varint,1,opt,name=id,proto3"`
	xxx_hidden_VmiDouble map[int64]float64      `protobuf:"bytes,11,rep,name=vmi_double,json=vmiDouble,proto3" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	xxx_hidden_VmiInt64  map[int64]int64        `protobuf:"bytes,12,rep,name=vmi_int64,json=vmiInt64,proto3" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmiUint64 map[int64]uint64       `protobuf:"bytes,13,rep,name=vmi_uint64,json=vmiUint64,proto3" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmiBool   map[int64]bool         `protobuf:"bytes,14,rep,name=vmi_bool,json=vmiBool,proto3" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmiString map[int64]string       `protobuf:"bytes,15,rep,name=vmi_string,json=vmiString,proto3" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_VmiBytes  map[int64][]byte       `protobuf:"bytes,16,rep,name=vmi_bytes,json=vmiBytes,proto3" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FooMi) Reset() {
	*x = FooMi{}
	mi := &file_example_library_foo_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMi) ProtoMessage() {}

func (x *FooMi) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMi) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooMi) GetVmiDouble() map[int64]float64 {
	if x != nil {
		return x.xxx_hidden_VmiDouble
	}
	return nil
}

func (x *FooMi) GetVmiInt64() map[int64]int64 {
	if x != nil {
		return x.xxx_hidden_VmiInt64
	}
	return nil
}

func (x *FooMi) GetVmiUint64() map[int64]uint64 {
	if x != nil {
		return x.xxx_hidden_VmiUint64
	}
	return nil
}

func (x *FooMi) GetVmiBool() map[int64]bool {
	if x != nil {
		return x.xxx_hidden_VmiBool
	}
	return nil
}

func (x *FooMi) GetVmiString() map[int64]string {
	if x != nil {
		return x.xxx_hidden_VmiString
	}
	return nil
}

func (x *FooMi) GetVmiBytes() map[int64][]byte {
	if x != nil {
		return x.xxx_hidden_VmiBytes
	}
	return nil
}

func (x *FooMi) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooMi) SetVmiDouble(v map[int64]float64) {
	x.xxx_hidden_VmiDouble = v
}

func (x *FooMi) SetVmiInt64(v map[int64]int64) {
	x.xxx_hidden_VmiInt64 = v
}

func (x *FooMi) SetVmiUint64(v map[int64]uint64) {
	x.xxx_hidden_VmiUint64 = v
}

func (x *FooMi) SetVmiBool(v map[int64]bool) {
	x.xxx_hidden_VmiBool = v
}

func (x *FooMi) SetVmiString(v map[int64]string) {
	x.xxx_hidden_VmiString = v
}

func (x *FooMi) SetVmiBytes(v map[int64][]byte) {
	x.xxx_hidden_VmiBytes = v
}

type FooMi_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        int64
	VmiDouble map[int64]float64
	VmiInt64  map[int64]int64
	VmiUint64 map[int64]uint64
	VmiBool   map[int64]bool
	VmiString map[int64]string
	VmiBytes  map[int64][]byte
}

func (b0 FooMi_builder) Build() *FooMi {
	m0 := &FooMi{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_VmiDouble = b.VmiDouble
	x.xxx_hidden_VmiInt64 = b.VmiInt64
	x.xxx_hidden_VmiUint64 = b.VmiUint64
	x.xxx_hidden_VmiBool = b.VmiBool
	x.xxx_hidden_VmiString = b.VmiString
	x.xxx_hidden_VmiBytes = b.VmiBytes
	return m0
}

type FooMs struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id        int64                  `protobuf:"varint,1,opt,name=id,proto3"`
	xxx_hidden_VmsDouble map[string]float64     `protobuf:"bytes,11,rep,name=vms_double,json=vmsDouble,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	xxx_hidden_VmsInt64  map[string]int64       `protobuf:"bytes,12,rep,name=vms_int64,json=vmsInt64,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmsUint64 map[string]uint64      `protobuf:"bytes,13,rep,name=vms_uint64,json=vmsUint64,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmsBool   map[string]bool        `protobuf:"bytes,14,rep,name=vms_bool,json=vmsBool,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmsString map[string]string      `protobuf:"bytes,15,rep,name=vms_string,json=vmsString,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_VmsBytes  map[string][]byte      `protobuf:"bytes,16,rep,name=vms_bytes,json=vmsBytes,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FooMs) Reset() {
	*x = FooMs{}
	mi := &file_example_library_foo_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMs) ProtoMessage() {}

func (x *FooMs) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMs) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooMs) GetVmsDouble() map[string]float64 {
	if x != nil {
		return x.xxx_hidden_VmsDouble
	}
	return nil
}

func (x *FooMs) GetVmsInt64() map[string]int64 {
	if x != nil {
		return x.xxx_hidden_VmsInt64
	}
	return nil
}

func (x *FooMs) GetVmsUint64() map[string]uint64 {
	if x != nil {
		return x.xxx_hidden_VmsUint64
	}
	return nil
}

func (x *FooMs) GetVmsBool() map[string]bool {
	if x != nil {
		return x.xxx_hidden_VmsBool
	}
	return nil
}

func (x *FooMs) GetVmsString() map[string]string {
	if x != nil {
		return x.xxx_hidden_VmsString
	}
	return nil
}

func (x *FooMs) GetVmsBytes() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_VmsBytes
	}
	return nil
}

func (x *FooMs) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooMs) SetVmsDouble(v map[string]float64) {
	x.xxx_hidden_VmsDouble = v
}

func (x *FooMs) SetVmsInt64(v map[string]int64) {
	x.xxx_hidden_VmsInt64 = v
}

func (x *FooMs) SetVmsUint64(v map[string]uint64) {
	x.xxx_hidden_VmsUint64 = v
}

func (x *FooMs) SetVmsBool(v map[string]bool) {
	x.xxx_hidden_VmsBool = v
}

func (x *FooMs) SetVmsString(v map[string]string) {
	x.xxx_hidden_VmsString = v
}

func (x *FooMs) SetVmsBytes(v map[string][]byte) {
	x.xxx_hidden_VmsBytes = v
}

type FooMs_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        int64
	VmsDouble map[string]float64
	VmsInt64  map[string]int64
	VmsUint64 map[string]uint64
	VmsBool   map[string]bool
	VmsString map[string]string
	VmsBytes  map[string][]byte
}

func (b0 FooMs_builder) Build() *FooMs {
	m0 := &FooMs{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_VmsDouble = b.VmsDouble
	x.xxx_hidden_VmsInt64 = b.VmsInt64
	x.xxx_hidden_VmsUint64 = b.VmsUint64
	x.xxx_hidden_VmsBool = b.VmsBool
	x.xxx_hidden_VmsString = b.VmsString
	x.xxx_hidden_VmsBytes = b.VmsBytes
	return m0
}

type FooMsd struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id        int64                  `protobuf:"varint,1,opt,name=id,proto3"`
	xxx_hidden_MsdDouble map[string]float64     `protobuf:"bytes,11,rep,name=msd_double,json=msdDouble,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	xxx_hidden_MsdInt64  map[string]int64       `protobuf:"bytes,12,rep,name=msd_int64,json=msdInt64,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_MsdUint64 map[string]uint64      `protobuf:"bytes,13,rep,name=msd_uint64,json=msdUint64,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_MsdBool   map[string]bool        `protobuf:"bytes,14,rep,name=msd_bool,json=msdBool,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_MsdString map[string]string      `protobuf:"bytes,15,rep,name=msd_string,json=msdString,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_MsdBytes  map[string][]byte      `protobuf:"bytes,16,rep,name=msd_bytes,json=msdBytes,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FooMsd) Reset() {
	*x = FooMsd{}
	mi := &file_example_library_foo_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMsd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMsd) ProtoMessage() {}

func (x *FooMsd) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMsd) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooMsd) GetMsdDouble() map[string]float64 {
	if x != nil {
		return x.xxx_hidden_MsdDouble
	}
	return nil
}

func (x *FooMsd) GetMsdInt64() map[string]int64 {
	if x != nil {
		return x.xxx_hidden_MsdInt64
	}
	return nil
}

func (x *FooMsd) GetMsdUint64() map[string]uint64 {
	if x != nil {
		return x.xxx_hidden_MsdUint64
	}
	return nil
}

func (x *FooMsd) GetMsdBool() map[string]bool {
	if x != nil {
		return x.xxx_hidden_MsdBool
	}
	return nil
}

func (x *FooMsd) GetMsdString() map[string]string {
	if x != nil {
		return x.xxx_hidden_MsdString
	}
	return nil
}

func (x *FooMsd) GetMsdBytes() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_MsdBytes
	}
	return nil
}

func (x *FooMsd) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooMsd) SetMsdDouble(v map[string]float64) {
	x.xxx_hidden_MsdDouble = v
}

func (x *FooMsd) SetMsdInt64(v map[string]int64) {
	x.xxx_hidden_MsdInt64 = v
}

func (x *FooMsd) SetMsdUint64(v map[string]uint64) {
	x.xxx_hidden_MsdUint64 = v
}

func (x *FooMsd) SetMsdBool(v map[string]bool) {
	x.xxx_hidden_MsdBool = v
}

func (x *FooMsd) SetMsdString(v map[string]string) {
	x.xxx_hidden_MsdString = v
}

func (x *FooMsd) SetMsdBytes(v map[string][]byte) {
	x.xxx_hidden_MsdBytes = v
}

type FooMsd_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        int64
	MsdDouble map[string]float64
	MsdInt64  map[string]int64
	MsdUint64 map[string]uint64
	MsdBool   map[string]bool
	MsdString map[string]string
	MsdBytes  map[string][]byte
}

func (b0 FooMsd_builder) Build() *FooMsd {
	m0 := &FooMsd{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_MsdDouble = b.MsdDouble
	x.xxx_hidden_MsdInt64 = b.MsdInt64
	x.xxx_hidden_MsdUint64 = b.MsdUint64
	x.xxx_hidden_MsdBool = b.MsdBool
	x.xxx_hidden_MsdString = b.MsdString
	x.xxx_hidden_MsdBytes = b.MsdBytes
	return m0
}

type FooK struct {
	state               protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_Id       int64                             `protobuf:"varint,1,opt,name=id,proto3"`
	xxx_hidden_KVTime   *timestamppb.Timestamp            `protobuf:"bytes,11,opt,name=k_v_time,json=kVTime,proto3"`
	xxx_hidden_KVdTime  *timestamppb.Timestamp            `protobuf:"bytes,12,opt,name=k_vd_time,json=kVdTime,proto3"`
	xxx_hidden_KVrTime  *[]*timestamppb.Timestamp         `protobuf:"bytes,13,rep,name=k_vr_time,json=kVrTime,proto3"`
	xxx_hidden_KVoTime  *timestamppb.Timestamp            `protobuf:"bytes,14,opt,name=k_vo_time,json=kVoTime,proto3,oneof"`
	xxx_hidden_KMiTime  map[int64]*timestamppb.Timestamp  `protobuf:"bytes,15,rep,name=k_mi_time,json=kMiTime,proto3" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_KMsTime  map[string]*timestamppb.Timestamp `protobuf:"bytes,16,rep,name=k_ms_time,json=kMsTime,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_KMsdTime map[string]*timestamppb.Timestamp `protobuf:"bytes,17,rep,name=k_msd_time,json=kMsdTime,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FooK) Reset() {
	*x = FooK{}
	mi := &file_example_library_foo_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooK) ProtoMessage() {}

func (x *FooK) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooK) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooK) GetKVTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KVTime
	}
	return nil
}

func (x *FooK) GetKVdTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KVdTime
	}
	return nil
}

func (x *FooK) GetKVrTime() []*timestamppb.Timestamp {
	if x != nil {
		if x.xxx_hidden_KVrTime != nil {
			return *x.xxx_hidden_KVrTime
		}
	}
	return nil
}

func (x *FooK) GetKVoTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KVoTime
	}
	return nil
}

func (x *FooK) GetKMiTime() map[int64]*timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KMiTime
	}
	return nil
}

func (x *FooK) GetKMsTime() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KMsTime
	}
	return nil
}

func (x *FooK) GetKMsdTime() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KMsdTime
	}
	return nil
}

func (x *FooK) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooK) SetKVTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_KVTime = v
}

func (x *FooK) SetKVdTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_KVdTime = v
}

func (x *FooK) SetKVrTime(v []*timestamppb.Timestamp) {
	x.xxx_hidden_KVrTime = &v
}

func (x *FooK) SetKVoTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_KVoTime = v
}

func (x *FooK) SetKMiTime(v map[int64]*timestamppb.Timestamp) {
	x.xxx_hidden_KMiTime = v
}

func (x *FooK) SetKMsTime(v map[string]*timestamppb.Timestamp) {
	x.xxx_hidden_KMsTime = v
}

func (x *FooK) SetKMsdTime(v map[string]*timestamppb.Timestamp) {
	x.xxx_hidden_KMsdTime = v
}

func (x *FooK) HasKVTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KVTime != nil
}

func (x *FooK) HasKVdTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KVdTime != nil
}

func (x *FooK) HasKVoTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KVoTime != nil
}

func (x *FooK) ClearKVTime() {
	x.xxx_hidden_KVTime = nil
}

func (x *FooK) ClearKVdTime() {
	x.xxx_hidden_KVdTime = nil
}

func (x *FooK) ClearKVoTime() {
	x.xxx_hidden_KVoTime = nil
}

type FooK_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       int64
	KVTime   *timestamppb.Timestamp
	KVdTime  *timestamppb.Timestamp
	KVrTime  []*timestamppb.Timestamp
	KVoTime  *timestamppb.Timestamp
	KMiTime  map[int64]*timestamppb.Timestamp
	KMsTime  map[string]*timestamppb.Timestamp
	KMsdTime map[string]*timestamppb.Timestamp
}

func (b0 FooK_builder) Build() *FooK {
	m0 := &FooK{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_KVTime = b.KVTime
	x.xxx_hidden_KVdTime = b.KVdTime
	x.xxx_hidden_KVrTime = &b.KVrTime
	x.xxx_hidden_KVoTime = b.KVoTime
	x.xxx_hidden_KMiTime = b.KMiTime
	x.xxx_hidden_KMsTime = b.KMsTime
	x.xxx_hidden_KMsdTime = b.KMsdTime
	return m0
}

type FooEf struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id,proto3"`
	xxx_hidden_EfVAuthor   *Author                `protobuf:"bytes,11,opt,name=ef_v_author,json=efVAuthor,proto3"`
	xxx_hidden_EfVdAuthor  *Author                `protobuf:"bytes,12,opt,name=ef_vd_author,json=efVdAuthor,proto3"`
	xxx_hidden_EfVrAuthor  *[]*Author             `protobuf:"bytes,13,rep,name=ef_vr_author,json=efVrAuthor,proto3"`
	xxx_hidden_EfVoAuthor  *Author                `protobuf:"bytes,14,opt,name=ef_vo_author,json=efVoAuthor,proto3,oneof"`
	xxx_hidden_EfMiAuthor  map[int64]*Author      `protobuf:"bytes,15,rep,name=ef_mi_author,json=efMiAuthor,proto3" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_EfMsAuthor  map[string]*Author     `protobuf:"bytes,16,rep,name=ef_ms_author,json=efMsAuthor,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_EfMsdAuthor map[string]*Author     `protobuf:"bytes,17,rep,name=ef_msd_author,json=efMsdAuthor,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FooEf) Reset() {
	*x = FooEf{}
	mi := &file_example_library_foo_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooEf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooEf) ProtoMessage() {}

func (x *FooEf) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooEf) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooEf) GetEfVAuthor() *Author {
	if x != nil {
		return x.xxx_hidden_EfVAuthor
	}
	return nil
}

func (x *FooEf) GetEfVdAuthor() *Author {
	if x != nil {
		return x.xxx_hidden_EfVdAuthor
	}
	return nil
}

func (x *FooEf) GetEfVrAuthor() []*Author {
	if x != nil {
		if x.xxx_hidden_EfVrAuthor != nil {
			return *x.xxx_hidden_EfVrAuthor
		}
	}
	return nil
}

func (x *FooEf) GetEfVoAuthor() *Author {
	if x != nil {
		return x.xxx_hidden_EfVoAuthor
	}
	return nil
}

func (x *FooEf) GetEfMiAuthor() map[int64]*Author {
	if x != nil {
		return x.xxx_hidden_EfMiAuthor
	}
	return nil
}

func (x *FooEf) GetEfMsAuthor() map[string]*Author {
	if x != nil {
		return x.xxx_hidden_EfMsAuthor
	}
	return nil
}

func (x *FooEf) GetEfMsdAuthor() map[string]*Author {
	if x != nil {
		return x.xxx_hidden_EfMsdAuthor
	}
	return nil
}

func (x *FooEf) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooEf) SetEfVAuthor(v *Author) {
	x.xxx_hidden_EfVAuthor = v
}

func (x *FooEf) SetEfVdAuthor(v *Author) {
	x.xxx_hidden_EfVdAuthor = v
}

func (x *FooEf) SetEfVrAuthor(v []*Author) {
	x.xxx_hidden_EfVrAuthor = &v
}

func (x *FooEf) SetEfVoAuthor(v *Author) {
	x.xxx_hidden_EfVoAuthor = v
}

func (x *FooEf) SetEfMiAuthor(v map[int64]*Author) {
	x.xxx_hidden_EfMiAuthor = v
}

func (x *FooEf) SetEfMsAuthor(v map[string]*Author) {
	x.xxx_hidden_EfMsAuthor = v
}

func (x *FooEf) SetEfMsdAuthor(v map[string]*Author) {
	x.xxx_hidden_EfMsdAuthor = v
}

func (x *FooEf) HasEfVAuthor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EfVAuthor != nil
}

func (x *FooEf) HasEfVdAuthor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EfVdAuthor != nil
}

func (x *FooEf) HasEfVoAuthor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EfVoAuthor != nil
}

func (x *FooEf) ClearEfVAuthor() {
	x.xxx_hidden_EfVAuthor = nil
}

func (x *FooEf) ClearEfVdAuthor() {
	x.xxx_hidden_EfVdAuthor = nil
}

func (x *FooEf) ClearEfVoAuthor() {
	x.xxx_hidden_EfVoAuthor = nil
}

type FooEf_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          int64
	EfVAuthor   *Author
	EfVdAuthor  *Author
	EfVrAuthor  []*Author
	EfVoAuthor  *Author
	EfMiAuthor  map[int64]*Author
	EfMsAuthor  map[string]*Author
	EfMsdAuthor map[string]*Author
}

func (b0 FooEf_builder) Build() *FooEf {
	m0 := &FooEf{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_EfVAuthor = b.EfVAuthor
	x.xxx_hidden_EfVdAuthor = b.EfVdAuthor
	x.xxx_hidden_EfVrAuthor = &b.EfVrAuthor
	x.xxx_hidden_EfVoAuthor = b.EfVoAuthor
	x.xxx_hidden_EfMiAuthor = b.EfMiAuthor
	x.xxx_hidden_EfMsAuthor = b.EfMsAuthor
	x.xxx_hidden_EfMsdAuthor = b.EfMsdAuthor
	return m0
}

var File_example_library_foo_proto protoreflect.FileDescriptor

var file_example_library_foo_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2f, 0x66, 0x6f, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x1a, 0x1c, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x04, 0x46, 0x6f, 0x6f, 0x56, 0x12,
	0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xda, 0xfc, 0x15,
	0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0xf5, 0x01, 0x0a, 0x05, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x12, 0x16, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x28, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x76, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x08,
	0x76, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x76, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02,
	0x4a, 0x00, 0x52, 0x07, 0x76, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x76,
	0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06,
	0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x08, 0x76, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x1f, 0x0a, 0x07, 0x76, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x06, 0x76, 0x64, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x23, 0x0a, 0x09, 0x76, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x08, 0x76, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x08, 0x76, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00,
	0x52, 0x07, 0x76, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x05, 0x46, 0x6f,
	0x6f, 0x56, 0x72, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x06, 0xda, 0xfc, 0x15, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08,
	0x76, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x76, 0x72, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x76, 0x72, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x17, 0x0a, 0x07, 0x76, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x08, 0x52, 0x06, 0x76, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x72,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x76, 0x72, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0xb3, 0x02, 0x0a, 0x05, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x12, 0x16, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x28, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x76, 0x6f, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x08, 0x76, 0x6f, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x6f, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x42, 0x6f,
	0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x76, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x6f, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6f, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76,
	0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x06, 0x46, 0x6f, 0x6f, 0x56,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xda, 0xfc, 0x15, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x76, 0x6f,
	0x6e, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x06,
	0xda, 0xfc, 0x15, 0x02, 0x38, 0x01, 0x48, 0x00, 0x52, 0x09, 0x76, 0x6f, 0x6e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x76, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x38,
	0x01, 0x48, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0a, 0x76, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x38, 0x01, 0x48, 0x02, 0x52, 0x09,
	0x76, 0x6f, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x08,
	0x76, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06,
	0xda, 0xfc, 0x15, 0x02, 0x38, 0x01, 0x48, 0x03, 0x52, 0x07, 0x76, 0x6f, 0x6e, 0x42, 0x6f, 0x6f,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x76, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x38, 0x01,
	0x48, 0x04, 0x52, 0x09, 0x76, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x09, 0x76, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x38, 0x01, 0x48, 0x05, 0x52, 0x08, 0x76,
	0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76,
	0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6e, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x22, 0xa7, 0x06, 0x0a, 0x05, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x28, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x76, 0x6d, 0x69, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x2e, 0x56,
	0x6d, 0x69, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76,
	0x6d, 0x69, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x76, 0x6d, 0x69, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f,
	0x6f, 0x4d, 0x69, 0x2e, 0x56, 0x6d, 0x69, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x76, 0x6d, 0x69, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x44, 0x0a, 0x0a, 0x76,
	0x6d, 0x69, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x2e, 0x56, 0x6d, 0x69, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x69, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x3e, 0x0a, 0x08, 0x76, 0x6d, 0x69, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x2e, 0x56, 0x6d, 0x69, 0x42,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x6d, 0x69, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x44, 0x0a, 0x0a, 0x76, 0x6d, 0x69, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x2e, 0x56, 0x6d,
	0x69, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d,
	0x69, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x09, 0x76, 0x6d, 0x69, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f,
	0x4d, 0x69, 0x2e, 0x56, 0x6d, 0x69, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x76, 0x6d, 0x69, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d,
	0x69, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x56, 0x6d, 0x69, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x69, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x56, 0x6d, 0x69, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x69, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x56, 0x6d, 0x69, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x06, 0x0a, 0x05, 0x46,
	0x6f, 0x6f, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0a,
	0x76, 0x6d, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x2e, 0x56, 0x6d, 0x73, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x73, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x76, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x2e, 0x56, 0x6d,
	0x73, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x6d, 0x73,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x44, 0x0a, 0x0a, 0x76, 0x6d, 0x73, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d,
	0x73, 0x2e, 0x56, 0x6d, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x76, 0x6d, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x3e, 0x0a, 0x08, 0x76,
	0x6d, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e,
	0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x2e, 0x56, 0x6d, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x76, 0x6d, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0a, 0x76,
	0x6d, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x2e, 0x56, 0x6d, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x41, 0x0a, 0x09, 0x76, 0x6d, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x2e, 0x56, 0x6d, 0x73,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x6d, 0x73, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x56, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a,
	0x0c, 0x56, 0x6d, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x56, 0x6d, 0x73, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x06, 0x0a, 0x06, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x12,
	0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xda, 0xfc, 0x15,
	0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x6d, 0x73, 0x64, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f,
	0x6f, 0x4d, 0x73, 0x64, 0x2e, 0x4d, 0x73, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x09, 0x6d, 0x73, 0x64,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x6d, 0x73, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d,
	0x73, 0x64, 0x2e, 0x4d, 0x73, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x08, 0x6d, 0x73, 0x64, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x4d, 0x0a, 0x0a, 0x6d, 0x73, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x2e,
	0x4d, 0x73, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06,
	0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x09, 0x6d, 0x73, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x73, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x2e, 0x4d, 0x73, 0x64,
	0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x4a,
	0x00, 0x52, 0x07, 0x6d, 0x73, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x6d, 0x73,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x2e, 0x4d, 0x73, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x09,
	0x6d, 0x73, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x09, 0x6d, 0x73, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x2e, 0x4d, 0x73, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x08, 0x6d, 0x73, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x73, 0x64, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x73, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x73, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a,
	0x0a, 0x0c, 0x4d, 0x73, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x73,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x73, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x05, 0x0a, 0x04, 0x46, 0x6f, 0x6f, 0x4b, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02,
	0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6b, 0x5f, 0x76, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x6b, 0x56, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09,
	0x6b, 0x5f, 0x76, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xda, 0xfc, 0x15,
	0x02, 0x4a, 0x00, 0x52, 0x07, 0x6b, 0x56, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x6b, 0x5f, 0x76, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6b, 0x56, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6b, 0x5f, 0x76, 0x6f, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x56, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x09, 0x6b, 0x5f, 0x6d, 0x69, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4b, 0x2e, 0x4b, 0x4d, 0x69, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6b, 0x4d, 0x69, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6b, 0x5f, 0x6d, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4b, 0x2e, 0x4b, 0x4d, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6b, 0x4d, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x0a, 0x6b, 0x5f, 0x6d, 0x73, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4b, 0x2e, 0x4b, 0x4d, 0x73,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02,
	0x4a, 0x00, 0x52, 0x08, 0x6b, 0x4d, 0x73, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x56, 0x0a, 0x0c,
	0x4b, 0x4d, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0c, 0x4b, 0x4d, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0d,
	0x4b, 0x4d, 0x73, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6b, 0x5f, 0x76, 0x6f, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x99, 0x06, 0x0a, 0x05, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x12, 0x16, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x28,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x66, 0x5f, 0x76, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x66, 0x56, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x41,
	0x0a, 0x0c, 0x65, 0x66, 0x5f, 0x76, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x06, 0xda,
	0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x0a, 0x65, 0x66, 0x56, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x39, 0x0a, 0x0c, 0x65, 0x66, 0x5f, 0x76, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x52, 0x0a, 0x65, 0x66, 0x56, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0c,
	0x65, 0x66, 0x5f, 0x76, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x65,
	0x66, 0x56, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0c,
	0x65, 0x66, 0x5f, 0x6d, 0x69, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x2e, 0x45, 0x66, 0x4d, 0x69, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x66, 0x4d, 0x69,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x65, 0x66, 0x5f, 0x6d, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x45, 0x66, 0x2e, 0x45, 0x66, 0x4d, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x66, 0x4d, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x53, 0x0a, 0x0d, 0x65, 0x66, 0x5f, 0x6d, 0x73, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x2e,
	0x45, 0x66, 0x4d, 0x73, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x06, 0xda, 0xfc, 0x15, 0x02, 0x4a, 0x00, 0x52, 0x0b, 0x65, 0x66, 0x4d, 0x73, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x1a, 0x56, 0x0a, 0x0f, 0x45, 0x66, 0x4d, 0x69, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a,
	0x0f, 0x45, 0x66, 0x4d, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x10, 0x45, 0x66, 0x4d, 0x73, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x65, 0x66, 0x5f, 0x76, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42,
	0x42, 0xc2, 0xfc, 0x15, 0x06, 0x0a, 0x00, 0x12, 0x02, 0x10, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x73, 0x6f, 0x6d, 0x6e, 0x75, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x6f, 0x72, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_example_library_foo_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_example_library_foo_proto_goTypes = []any{
	(*FooV)(nil),                  // 0: example.library.FooV
	(*FooVd)(nil),                 // 1: example.library.FooVd
	(*FooVr)(nil),                 // 2: example.library.FooVr
	(*FooVo)(nil),                 // 3: example.library.FooVo
	(*FooVon)(nil),                // 4: example.library.FooVon
	(*FooMi)(nil),                 // 5: example.library.FooMi
	(*FooMs)(nil),                 // 6: example.library.FooMs
	(*FooMsd)(nil),                // 7: example.library.FooMsd
	(*FooK)(nil),                  // 8: example.library.FooK
	(*FooEf)(nil),                 // 9: example.library.FooEf
	nil,                           // 10: example.library.FooMi.VmiDoubleEntry
	nil,                           // 11: example.library.FooMi.VmiInt64Entry
	nil,                           // 12: example.library.FooMi.VmiUint64Entry
	nil,                           // 13: example.library.FooMi.VmiBoolEntry
	nil,                           // 14: example.library.FooMi.VmiStringEntry
	nil,                           // 15: example.library.FooMi.VmiBytesEntry
	nil,                           // 16: example.library.FooMs.VmsDoubleEntry
	nil,                           // 17: example.library.FooMs.VmsInt64Entry
	nil,                           // 18: example.library.FooMs.VmsUint64Entry
	nil,                           // 19: example.library.FooMs.VmsBoolEntry
	nil,                           // 20: example.library.FooMs.VmsStringEntry
	nil,                           // 21: example.library.FooMs.VmsBytesEntry
	nil,                           // 22: example.library.FooMsd.MsdDoubleEntry
	nil,                           // 23: example.library.FooMsd.MsdInt64Entry
	nil,                           // 24: example.library.FooMsd.MsdUint64Entry
	nil,                           // 25: example.library.FooMsd.MsdBoolEntry
	nil,                           // 26: example.library.FooMsd.MsdStringEntry
	nil,                           // 27: example.library.FooMsd.MsdBytesEntry
	nil,                           // 28: example.library.FooK.KMiTimeEntry
	nil,                           // 29: example.library.FooK.KMsTimeEntry
	nil,                           // 30: example.library.FooK.KMsdTimeEntry
	nil,                           // 31: example.library.FooEf.EfMiAuthorEntry
	nil,                           // 32: example.library.FooEf.EfMsAuthorEntry
	nil,                           // 33: example.library.FooEf.EfMsdAuthorEntry
	(*timestamppb.Timestamp)(nil), // 34: google.protobuf.Timestamp
	(*Author)(nil),                // 35: example.library.Author
}
var file_example_library_foo_proto_depIdxs = []int32{
	10, // 0: example.library.FooMi.vmi_double:type_name -> example.library.FooMi.VmiDoubleEntry
	11, // 1: example.library.FooMi.vmi_int64:type_name -> example.library.FooMi.VmiInt64Entry
	12, // 2: example.library.FooMi.vmi_uint64:type_name -> example.library.FooMi.VmiUint64Entry
	13, // 3: example.library.FooMi.vmi_bool:type_name -> example.library.FooMi.VmiBoolEntry
	14, // 4: example.library.FooMi.vmi_string:type_name -> example.library.FooMi.VmiStringEntry
	15, // 5: example.library.FooMi.vmi_bytes:type_name -> example.library.FooMi.VmiBytesEntry
	16, // 6: example.library.FooMs.vms_double:type_name -> example.library.FooMs.VmsDoubleEntry
	17, // 7: example.library.FooMs.vms_int64:type_name -> example.library.FooMs.VmsInt64Entry
	18, // 8: example.library.FooMs.vms_uint64:type_name -> example.library.FooMs.VmsUint64Entry
	19, // 9: example.library.FooMs.vms_bool:type_name -> example.library.FooMs.VmsBoolEntry
	20, // 10: example.library.FooMs.vms_string:type_name -> example.library.FooMs.VmsStringEntry
	21, // 11: example.library.FooMs.vms_bytes:type_name -> example.library.FooMs.VmsBytesEntry
	22, // 12: example.library.FooMsd.msd_double:type_name -> example.library.FooMsd.MsdDoubleEntry
	23, // 13: example.library.FooMsd.msd_int64:type_name -> example.library.FooMsd.MsdInt64Entry
	24, // 14: example.library.FooMsd.msd_uint64:type_name -> example.library.FooMsd.MsdUint64Entry
	25, // 15: example.library.FooMsd.msd_bool:type_name -> example.library.FooMsd.MsdBoolEntry
	26, // 16: example.library.FooMsd.msd_string:type_name -> example.library.FooMsd.MsdStringEntry
	27, // 17: example.library.FooMsd.msd_bytes:type_name -> example.library.FooMsd.MsdBytesEntry
	34, // 18: example.library.FooK.k_v_time:type_name -> google.protobuf.Timestamp
	34, // 19: example.library.FooK.k_vd_time:type_name -> google.protobuf.Timestamp
	34, // 20: example.library.FooK.k_vr_time:type_name -> google.protobuf.Timestamp
	34, // 21: example.library.FooK.k_vo_time:type_name -> google.protobuf.Timestamp
	28, // 22: example.library.FooK.k_mi_time:type_name -> example.library.FooK.KMiTimeEntry
	29, // 23: example.library.FooK.k_ms_time:type_name -> example.library.FooK.KMsTimeEntry
	30, // 24: example.library.FooK.k_msd_time:type_name -> example.library.FooK.KMsdTimeEntry
	35, // 25: example.library.FooEf.ef_v_author:type_name -> example.library.Author
	35, // 26: example.library.FooEf.ef_vd_author:type_name -> example.library.Author
	35, // 27: example.library.FooEf.ef_vr_author:type_name -> example.library.Author
	35, // 28: example.library.FooEf.ef_vo_author:type_name -> example.library.Author
	31, // 29: example.library.FooEf.ef_mi_author:type_name -> example.library.FooEf.EfMiAuthorEntry
	32, // 30: example.library.FooEf.ef_ms_author:type_name -> example.library.FooEf.EfMsAuthorEntry
	33, // 31: example.library.FooEf.ef_msd_author:type_name -> example.library.FooEf.EfMsdAuthorEntry
	34, // 32: example.library.FooK.KMiTimeEntry.value:type_name -> google.protobuf.Timestamp
	34, // 33: example.library.FooK.KMsTimeEntry.value:type_name -> google.protobuf.Timestamp
	34, // 34: example.library.FooK.KMsdTimeEntry.value:type_name -> google.protobuf.Timestamp
	35, // 35: example.library.FooEf.EfMiAuthorEntry.value:type_name -> example.library.Author
	35, // 36: example.library.FooEf.EfMsAuthorEntry.value:type_name -> example.library.Author
	35, // 37: example.library.FooEf.EfMsdAuthorEntry.value:type_name -> example.library.Author
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_example_library_foo_proto_init() }
func file_example_library_foo_proto_init() {
	if File_example_library_foo_proto != nil {
		return
	}
	file_example_library_author_proto_init()
	file_example_library_foo_proto_msgTypes[3].OneofWrappers = []any{}
	file_example_library_foo_proto_msgTypes[4].OneofWrappers = []any{}
	file_example_library_foo_proto_msgTypes[8].OneofWrappers = []any{}
	file_example_library_foo_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_example_library_foo_proto_rawDesc), len(file_example_library_foo_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_example_library_foo_proto_goTypes,
		DependencyIndexes: file_example_library_foo_proto_depIdxs,
		MessageInfos:      file_example_library_foo_proto_msgTypes,
	}.Build()
	File_example_library_foo_proto = out.File
	file_example_library_foo_proto_goTypes = nil
	file_example_library_foo_proto_depIdxs = nil
}
