// Code generated by "protoc-gen-orm-ent-grpc". DO NOT EDIT

package bare

import (
	context "context"
	library "github.com/lesomnus/proto-orm/internal/example/library"
	ent "github.com/lesomnus/proto-orm/internal/example/library/ent"
	fook "github.com/lesomnus/proto-orm/internal/example/library/ent/fook"
	predicate "github.com/lesomnus/proto-orm/internal/example/library/ent/predicate"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type FooKServiceServer struct {
	db *ent.Client
	library.UnimplementedFooKServiceServer
}

func NewFooKServiceServer(db *ent.Client) *FooKServiceServer {
	return &FooKServiceServer{db: db}
}

func (s *FooKServiceServer) Add(ctx context.Context, req *library.FooKAddRequest) (*library.FooK, error) {
	q := s.db.FooK.Create()
	q.SetID(req.GetId())
	q.SetKVTime(req.GetKVTime().AsTime())
	if req.HasKVdTime() {
		q.SetKVdTime(req.GetKVdTime().AsTime())
	}
	if v := req.GetKVrTime(); v != nil {
		q.SetKVrTime(v)
	}
	q.SetKVoTime(req.GetKVoTime().AsTime())
	if v := req.GetKMiTime(); v != nil {
		q.SetKMiTime(v)
	}
	if v := req.GetKMsTime(); v != nil {
		q.SetKMsTime(v)
	}
	if v := req.GetKMsdTime(); v != nil {
		q.SetKMsdTime(v)
	}

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *FooKServiceServer) Get(ctx context.Context, req *library.FooKGetRequest) (*library.FooK, error) {
	q := s.db.FooK.Query()
	if p, err := FooKPick(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	v, err := q.Only(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *FooKServiceServer) Patch(ctx context.Context, req *library.FooKPatchRequest) (*emptypb.Empty, error) {
	id, err := FooKGetId(ctx, s.db, req.GetKey())
	if err != nil {
		return nil, err
	}

	q := s.db.FooK.UpdateOneID(id)
	if req.HasKVTime() {
		q.SetKVTime(req.GetKVTime().AsTime())
	}
	if req.HasKVdTime() {
		q.SetKVdTime(req.GetKVdTime().AsTime())
	}
	if v := req.GetKVrTime(); v != nil {
		q.SetKVrTime(v)
	}
	if req.HasKVoTime() {
		q.SetKVoTime(req.GetKVoTime().AsTime())
	}
	if v := req.GetKMiTime(); v != nil {
		q.SetKMiTime(v)
	}
	if v := req.GetKMsTime(); v != nil {
		q.SetKMsTime(v)
	}
	if v := req.GetKMsdTime(); v != nil {
		q.SetKMsdTime(v)
	}

	if _, err := q.Save(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func (s *FooKServiceServer) Erase(ctx context.Context, req *library.FooKGetRequest) (*emptypb.Empty, error) {
	p, err := FooKPick(req)
	if err != nil {
		return nil, err
	}
	if _, err := s.db.FooK.Delete().Where(p).Exec(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func FooKPick(req *library.FooKGetRequest) (predicate.FooK, error) {
	switch req.WhichKey() {
	case library.FooKGetRequest_Id_case:
		return fook.IDEQ(req.GetId()), nil
	case library.FooKGetRequest_Key_not_set_case:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key")
	}
}

func FooKGetId(ctx context.Context, db *ent.Client, req *library.FooKGetRequest) (int64, error) {
	var z int64
	if req.HasId() {
		return req.GetId(), nil
	}

	p, err := FooKPick(req)
	if err != nil {
		return z, err
	}

	v, err := db.FooK.Query().Where(p).OnlyID(ctx)
	if err != nil {
		return z, status.Errorf(codes.Internal, "query: %s", err)
	}

	return v, nil
}
