// Code generated by "protoc-gen-orm-ent-grpc". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	library "github.com/lesomnus/proto-orm/internal/example/library"
	ent "github.com/lesomnus/proto-orm/internal/example/library/ent"
	loan "github.com/lesomnus/proto-orm/internal/example/library/ent/loan"
	predicate "github.com/lesomnus/proto-orm/internal/example/library/ent/predicate"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

func (s *LoanServiceServer) Add(ctx context.Context, req *library.LoanAddRequest) (*library.Loan, error) {
	q := s.db.Loan.Create()
	if v, err := uuid.FromBytes(req.Id); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.SetID(v)
	}
	if id, err := BookGetId(ctx, s.db, req.GetBook()); err != nil {
		return nil, err
	} else {
		q.SetBookID(id)
	}
	if id, err := MemberGetId(ctx, s.db, req.GetMember()); err != nil {
		return nil, err
	} else {
		q.SetMemberID(id)
	}
	q.SetDateDue(req.DateDue.AsTime())
	q.SetDateReturn(req.DateReturn.AsTime())
	q.SetDateCreated(req.DateCreated.AsTime())

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func LoanPick(req *library.LoanGetRequest) (predicate.Loan, error) {
	switch k := req.GetKey().(type) {
	case *library.LoanGetRequest_Id:
		if v, err := uuid.FromBytes(k.Id); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", "err")
		} else {
			return loan.IDEQ(v), nil
		}
	case nil:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key")
	}
}

func LoanGetId(ctx context.Context, db *ent.Client, req *library.LoanGetRequest) (uuid.UUID, error) {
	var z uuid.UUID
	k := req.GetKey()
	if r, ok := k.(*library.LoanGetRequest_Id); ok {
		if v, err := uuid.FromBytes(r.Id); err != nil {
			return z, status.Errorf(codes.InvalidArgument, "Id: %s", "err")
		} else {
			return v, nil
		}
	}

	p, err := LoanPick(req)
	if err != nil {
		return z, err
	}

	v, err := db.Loan.Query().Where(p).OnlyID(ctx)
	if err != nil {
		return z, status.Errorf(codes.Internal, "query: %s", err)
	}

	return v, nil
}
