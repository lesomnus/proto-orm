// Code generated by "protoc-gen-orm-ent-grpc". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	library "github.com/lesomnus/proto-orm/internal/example/library"
	ent "github.com/lesomnus/proto-orm/internal/example/library/ent"
	book "github.com/lesomnus/proto-orm/internal/example/library/ent/book"
	predicate "github.com/lesomnus/proto-orm/internal/example/library/ent/predicate"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

type BookServiceServer struct {
	db *ent.Client
	library.UnimplementedBookServiceServer
}

func NewBookServiceServer(db *ent.Client) *BookServiceServer {
	return &BookServiceServer{db: db}
}

func (s *BookServiceServer) Add(ctx context.Context, req *library.BookAddRequest) (*library.Book, error) {
	q := s.db.Book.Create()
	if v, err := uuid.FromBytes(req.Id); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.SetID(v)
	}
	q.SetTitle(req.Title)
	{
		ids := []uuid.UUID{}
		for _, r := range req.GetAuthors() {
			if id, err := AuthorGetId(ctx, s.db, r); err != nil {
				return nil, err
			} else {
				ids = append(ids, id)
			}
		}
		q.AddAuthorIDs(ids...)
	}
	q.SetDateCreated(req.DateCreated.AsTime())

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *BookServiceServer) Get(ctx context.Context, req *library.BookGetRequest) (*library.Book, error) {
	q := s.db.Book.Query()
	if p, err := BookPick(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	v, err := q.Only(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *BookServiceServer) Patch(ctx context.Context, req *library.BookPatchRequest) (*library.Book, error) {
	id, err := BookGetId(ctx, s.db, req.GetKey())
	if err != nil {
		return nil, err
	}

	q := s.db.Book.UpdateOneID(id)
	if req.Title != nil {
		q.SetTitle(*req.Title)
	}

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *BookServiceServer) Erase(ctx context.Context, req *library.BookGetRequest) (*library.Book, error) {
	p, err := BookPick(req)
	if err != nil {
		return nil, err
	}
	if _, err := s.db.Book.Delete().Where(p).Exec(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func BookPick(req *library.BookGetRequest) (predicate.Book, error) {
	switch k := req.GetKey().(type) {
	case *library.BookGetRequest_Id:
		if v, err := uuid.FromBytes(k.Id); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", "err")
		} else {
			return book.IDEQ(v), nil
		}
	case nil:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key")
	}
}

func BookGetId(ctx context.Context, db *ent.Client, req *library.BookGetRequest) (uuid.UUID, error) {
	var z uuid.UUID
	k := req.GetKey()
	if r, ok := k.(*library.BookGetRequest_Id); ok {
		if v, err := uuid.FromBytes(r.Id); err != nil {
			return z, status.Errorf(codes.InvalidArgument, "Id: %s", "err")
		} else {
			return v, nil
		}
	}

	p, err := BookPick(req)
	if err != nil {
		return z, err
	}

	v, err := db.Book.Query().Where(p).OnlyID(ctx)
	if err != nil {
		return z, status.Errorf(codes.Internal, "query: %s", err)
	}

	return v, nil
}
