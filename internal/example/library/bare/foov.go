// Code generated by "protoc-gen-orm-ent-grpc". DO NOT EDIT

package bare

import (
	context "context"
	library "github.com/lesomnus/proto-orm/internal/example/library"
	ent "github.com/lesomnus/proto-orm/internal/example/library/ent"
	foov "github.com/lesomnus/proto-orm/internal/example/library/ent/foov"
	predicate "github.com/lesomnus/proto-orm/internal/example/library/ent/predicate"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type FooVServiceServer struct {
	db *ent.Client
	library.UnimplementedFooVServiceServer
}

func NewFooVServiceServer(db *ent.Client) *FooVServiceServer {
	return &FooVServiceServer{db: db}
}

func (s *FooVServiceServer) Add(ctx context.Context, req *library.FooVAddRequest) (*library.FooV, error) {
	q := s.db.FooV.Create()
	q.SetID(req.GetId())
	q.SetVDouble(req.GetVDouble())
	q.SetVInt64(req.GetVInt64())
	q.SetVUint64(req.GetVUint64())
	q.SetVBool(req.GetVBool())
	q.SetVString(req.GetVString())
	q.SetVBytes(req.GetVBytes())

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *FooVServiceServer) Get(ctx context.Context, req *library.FooVGetRequest) (*library.FooV, error) {
	q := s.db.FooV.Query()
	if p, err := FooVPick(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	v, err := q.Only(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *FooVServiceServer) Patch(ctx context.Context, req *library.FooVPatchRequest) (*emptypb.Empty, error) {
	id, err := FooVGetId(ctx, s.db, req.GetKey())
	if err != nil {
		return nil, err
	}

	q := s.db.FooV.UpdateOneID(id)
	if req.HasVDouble() {
		q.SetVDouble(req.GetVDouble())
	}
	if req.HasVInt64() {
		q.SetVInt64(req.GetVInt64())
	}
	if req.HasVUint64() {
		q.SetVUint64(req.GetVUint64())
	}
	if req.HasVBool() {
		q.SetVBool(req.GetVBool())
	}
	if req.HasVString() {
		q.SetVString(req.GetVString())
	}
	if req.HasVBytes() {
		q.SetVBytes(req.GetVBytes())
	}

	if _, err := q.Save(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func (s *FooVServiceServer) Erase(ctx context.Context, req *library.FooVGetRequest) (*emptypb.Empty, error) {
	p, err := FooVPick(req)
	if err != nil {
		return nil, err
	}
	if _, err := s.db.FooV.Delete().Where(p).Exec(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func FooVPick(req *library.FooVGetRequest) (predicate.FooV, error) {
	switch req.WhichKey() {
	case library.FooVGetRequest_Id_case:
		return foov.IDEQ(req.GetId()), nil
	case library.FooVGetRequest_Key_not_set_case:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key")
	}
}

func FooVGetId(ctx context.Context, db *ent.Client, req *library.FooVGetRequest) (int64, error) {
	var z int64
	if req.HasId() {
		return req.GetId(), nil
	}

	p, err := FooVPick(req)
	if err != nil {
		return z, err
	}

	v, err := db.FooV.Query().Where(p).OnlyID(ctx)
	if err != nil {
		return z, status.Errorf(codes.Internal, "query: %s", err)
	}

	return v, nil
}
