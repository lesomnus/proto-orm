// Code generated by "protoc-gen-orm-ent-grpc". DO NOT EDIT

package bare

import (
	context "context"
	library "github.com/lesomnus/proto-orm/internal/example/library"
	ent "github.com/lesomnus/proto-orm/internal/example/library/ent"
	fooef "github.com/lesomnus/proto-orm/internal/example/library/ent/fooef"
	predicate "github.com/lesomnus/proto-orm/internal/example/library/ent/predicate"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type FooEfServiceServer struct {
	db *ent.Client
	library.UnimplementedFooEfServiceServer
}

func NewFooEfServiceServer(db *ent.Client) *FooEfServiceServer {
	return &FooEfServiceServer{db: db}
}

func (s *FooEfServiceServer) Add(ctx context.Context, req *library.FooEfAddRequest) (*library.FooEf, error) {
	q := s.db.FooEf.Create()
	q.SetID(req.GetId())
	q.SetEfVAuthor(req.GetEfVAuthor())
	if req.HasEfVdAuthor() {
		q.SetEfVdAuthor(req.GetEfVdAuthor())
	}
	if v := req.GetEfVrAuthor(); v != nil {
		q.SetEfVrAuthor(v)
	}
	q.SetEfVoAuthor(req.GetEfVoAuthor())
	if v := req.GetEfMiAuthor(); v != nil {
		q.SetEfMiAuthor(v)
	}
	if v := req.GetEfMsAuthor(); v != nil {
		q.SetEfMsAuthor(v)
	}
	if v := req.GetEfMsdAuthor(); v != nil {
		q.SetEfMsdAuthor(v)
	}

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *FooEfServiceServer) Get(ctx context.Context, req *library.FooEfGetRequest) (*library.FooEf, error) {
	q := s.db.FooEf.Query()
	if p, err := FooEfPick(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	v, err := q.Only(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *FooEfServiceServer) Patch(ctx context.Context, req *library.FooEfPatchRequest) (*emptypb.Empty, error) {
	id, err := FooEfGetId(ctx, s.db, req.GetKey())
	if err != nil {
		return nil, err
	}

	q := s.db.FooEf.UpdateOneID(id)
	if req.HasEfVAuthor() {
		q.SetEfVAuthor(req.GetEfVAuthor())
	}
	if req.HasEfVdAuthor() {
		q.SetEfVdAuthor(req.GetEfVdAuthor())
	}
	if v := req.GetEfVrAuthor(); v != nil {
		q.SetEfVrAuthor(v)
	}
	if req.HasEfVoAuthor() {
		q.SetEfVoAuthor(req.GetEfVoAuthor())
	}
	if v := req.GetEfMiAuthor(); v != nil {
		q.SetEfMiAuthor(v)
	}
	if v := req.GetEfMsAuthor(); v != nil {
		q.SetEfMsAuthor(v)
	}
	if v := req.GetEfMsdAuthor(); v != nil {
		q.SetEfMsdAuthor(v)
	}

	if _, err := q.Save(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func (s *FooEfServiceServer) Erase(ctx context.Context, req *library.FooEfGetRequest) (*emptypb.Empty, error) {
	p, err := FooEfPick(req)
	if err != nil {
		return nil, err
	}
	if _, err := s.db.FooEf.Delete().Where(p).Exec(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func FooEfPick(req *library.FooEfGetRequest) (predicate.FooEf, error) {
	switch req.WhichKey() {
	case library.FooEfGetRequest_Id_case:
		return fooef.IDEQ(req.GetId()), nil
	case library.FooEfGetRequest_Key_not_set_case:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key")
	}
}

func FooEfGetId(ctx context.Context, db *ent.Client, req *library.FooEfGetRequest) (int64, error) {
	var z int64
	if req.HasId() {
		return req.GetId(), nil
	}

	p, err := FooEfPick(req)
	if err != nil {
		return z, err
	}

	v, err := db.FooEf.Query().Where(p).OnlyID(ctx)
	if err != nil {
		return z, status.Errorf(codes.Internal, "query: %s", err)
	}

	return v, nil
}
