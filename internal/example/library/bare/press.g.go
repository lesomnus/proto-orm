// Code generated by "protoc-gen-orm-ent-grpc". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	library "github.com/lesomnus/proto-orm/internal/example/library"
	ent "github.com/lesomnus/proto-orm/internal/example/library/ent"
	book "github.com/lesomnus/proto-orm/internal/example/library/ent/book"
	predicate "github.com/lesomnus/proto-orm/internal/example/library/ent/predicate"
	press "github.com/lesomnus/proto-orm/internal/example/library/ent/press"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type PressServiceServer struct {
	Db *ent.Client
	library.UnimplementedPressServiceServer
}

func NewPressServiceServer(db *ent.Client) PressServiceServer {
	return PressServiceServer{Db: db}
}

func (s PressServiceServer) Add(ctx context.Context, req *library.PressAddRequest) (*library.Press, error) {
	q := s.Db.Press.Create()
	if req.HasId() {
		if v, err := uuid.FromBytes(req.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
		} else {
			q.SetID(v)
		}
	}
	if id, err := BookGetId(ctx, s.Db, req.GetBook()); err != nil {
		s := status.Convert(err)
		s = status.Newf(s.Code(), "%s: %s", "book", s.Message())
		return nil, s.Err()
	} else {
		q.SetBookID(id)
	}
	q.SetSerialNumber(req.GetSerialNumber())
	if req.HasDateCreated() {
		q.SetDateCreated(req.GetDateCreated().AsTime())
	}

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s PressServiceServer) Get(ctx context.Context, req *library.PressGetRequest) (*library.Press, error) {
	q := s.Db.Press.Query()
	if req.HasSelect() {
		PressSelect(q, req.GetSelect())
	} else {
		q.WithBook(func(q *ent.BookQuery) {
			q.Select(book.FieldID)
		})
	}

	if p, err := PressPick(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	v, err := q.Only(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s PressServiceServer) Patch(ctx context.Context, req *library.PressPatchRequest) (*emptypb.Empty, error) {
	id, err := PressGetId(ctx, s.Db, req.GetKey())
	if err != nil {
		return nil, err
	}

	q := s.Db.Press.UpdateOneID(id)

	if _, err := q.Save(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func (s PressServiceServer) Erase(ctx context.Context, req *library.PressGetRequest) (*emptypb.Empty, error) {
	p, err := PressPick(req)
	if err != nil {
		return nil, err
	}
	if _, err := s.Db.Press.Delete().Where(p).Exec(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func PressPick(req *library.PressGetRequest) (predicate.Press, error) {
	switch req.WhichKey() {
	case library.PressGetRequest_Id_case:
		if v, err := uuid.FromBytes(req.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", "err")
		} else {
			return press.IDEQ(v), nil
		}
	case library.PressGetRequest_SerialNumber_case:
		ps := make([]predicate.Press, 0, 2)
		if p, err := BookPick(req.GetSerialNumber().GetBook()); err != nil {
			s := status.Convert(err)
			return nil, status.Errorf(codes.InvalidArgument, "serial_number.book: %s", s.Message())
		} else {
			ps = append(ps, press.HasBookWith(p))
		}
		ps = append(ps, press.SerialNumberEQ(req.GetSerialNumber().GetSerialNumber()))
		return press.And(ps...), nil
	case library.PressGetRequest_Key_not_set_case:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key")
	}
}

func PressGetId(ctx context.Context, db *ent.Client, req *library.PressGetRequest) (uuid.UUID, error) {
	var z uuid.UUID
	if req.HasId() {
		if v, err := uuid.FromBytes(req.GetId()); err != nil {
			return z, status.Errorf(codes.InvalidArgument, "key.id: %s", err)
		} else {
			return v, nil
		}
	}

	p, err := PressPick(req)
	if err != nil {
		return z, err
	}

	v, err := db.Press.Query().Where(p).OnlyID(ctx)
	if err != nil {
		return z, status.Errorf(codes.Internal, "query: %s", err)
	}

	return v, nil
}

func PressSelectedFields(m *library.PressSelect) []string {
	if m.GetAll() {
		return press.Columns
	}

	vs := []string{press.FieldID}
	if m.GetSerialNumber() {
		vs = append(vs, press.FieldSerialNumber)
	}
	if m.GetDateCreated() {
		vs = append(vs, press.FieldDateCreated)
	}

	return vs
}

func PressSelect(q *ent.PressQuery, m *library.PressSelect) {
	if !m.GetAll() {
		fields := PressSelectedFields(m)
		q.Select(fields...)
	}
	if m.HasBook() {
		q.WithBook(func(q *ent.BookQuery) {
			BookSelect(q, m.GetBook())
		})
	}
}
