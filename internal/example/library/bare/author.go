// Code generated by "protoc-gen-orm-ent-grpc". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	library "github.com/lesomnus/proto-orm/internal/example/library"
	ent "github.com/lesomnus/proto-orm/internal/example/library/ent"
	author "github.com/lesomnus/proto-orm/internal/example/library/ent/author"
	predicate "github.com/lesomnus/proto-orm/internal/example/library/ent/predicate"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type AuthorServiceServer struct {
	db *ent.Client
	library.UnimplementedAuthorServiceServer
}

func NewAuthorServiceServer(db *ent.Client) *AuthorServiceServer {
	return &AuthorServiceServer{db: db}
}

func (s *AuthorServiceServer) Add(ctx context.Context, req *library.AuthorAddRequest) (*library.Author, error) {
	q := s.db.Author.Create()
	if v := req.GetId(); v != nil {
		if w, err := uuid.FromBytes(v); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
		} else {
			q.SetID(w)
		}
	}
	q.SetAlias(req.GetAlias())
	q.SetName(req.GetName())
	if v := req.GetLabels(); v != nil {
		q.SetLabels(v)
	}
	if v := req.GetProfile(); v != nil {
		q.SetProfile(v)
	}
	if v := req.GetDateCreated(); v != nil {
		q.SetDateCreated(v.AsTime())
	}

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *AuthorServiceServer) Get(ctx context.Context, req *library.AuthorGetRequest) (*library.Author, error) {
	q := s.db.Author.Query()
	if p, err := AuthorPick(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	v, err := q.Only(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *AuthorServiceServer) Patch(ctx context.Context, req *library.AuthorPatchRequest) (*emptypb.Empty, error) {
	id, err := AuthorGetId(ctx, s.db, req.GetKey())
	if err != nil {
		return nil, err
	}

	q := s.db.Author.UpdateOneID(id)
	if req.HasAlias() {
		q.SetAlias(req.GetAlias())
	}
	if req.HasName() {
		q.SetName(req.GetName())
	}
	if v := req.GetLabels(); v != nil {
		q.SetLabels(v)
	}
	if req.HasProfile() {
		q.SetProfile(req.GetProfile())
	}

	if _, err := q.Save(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func (s *AuthorServiceServer) Erase(ctx context.Context, req *library.AuthorGetRequest) (*emptypb.Empty, error) {
	p, err := AuthorPick(req)
	if err != nil {
		return nil, err
	}
	if _, err := s.db.Author.Delete().Where(p).Exec(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func AuthorPick(req *library.AuthorGetRequest) (predicate.Author, error) {
	switch req.WhichKey() {
	case library.AuthorGetRequest_Id_case:
		if v, err := uuid.FromBytes(req.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", "err")
		} else {
			return author.IDEQ(v), nil
		}
	case library.AuthorGetRequest_Alias_case:
		return author.AliasEQ(req.GetAlias()), nil
	case library.AuthorGetRequest_Key_not_set_case:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key")
	}
}

func AuthorGetId(ctx context.Context, db *ent.Client, req *library.AuthorGetRequest) (uuid.UUID, error) {
	var z uuid.UUID
	if req.HasId() {
		if v, err := uuid.FromBytes(req.GetId()); err != nil {
			return z, status.Errorf(codes.InvalidArgument, "key.id: %s", err)
		} else {
			return v, nil
		}
	}

	p, err := AuthorPick(req)
	if err != nil {
		return z, err
	}

	v, err := db.Author.Query().Where(p).OnlyID(ctx)
	if err != nil {
		return z, status.Errorf(codes.Internal, "query: %s", err)
	}

	return v, nil
}
