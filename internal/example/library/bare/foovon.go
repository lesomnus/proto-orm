// Code generated by "protoc-gen-orm-ent-grpc". DO NOT EDIT

package bare

import (
	context "context"
	library "github.com/lesomnus/proto-orm/internal/example/library"
	ent "github.com/lesomnus/proto-orm/internal/example/library/ent"
	foovon "github.com/lesomnus/proto-orm/internal/example/library/ent/foovon"
	predicate "github.com/lesomnus/proto-orm/internal/example/library/ent/predicate"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type FooVonServiceServer struct {
	Db *ent.Client
	library.UnimplementedFooVonServiceServer
}

func NewFooVonServiceServer(db *ent.Client) FooVonServiceServer {
	return FooVonServiceServer{Db: db}
}

func (s FooVonServiceServer) Add(ctx context.Context, req *library.FooVonAddRequest) (*library.FooVon, error) {
	q := s.Db.FooVon.Create()
	q.SetID(req.GetId())
	if req.HasVonDouble() {
		q.SetVonDouble(req.GetVonDouble())
	}
	if req.HasVonInt64() {
		q.SetVonInt64(req.GetVonInt64())
	}
	if req.HasVonUint64() {
		q.SetVonUint64(req.GetVonUint64())
	}
	if req.HasVonBool() {
		q.SetVonBool(req.GetVonBool())
	}
	if req.HasVonString() {
		q.SetVonString(req.GetVonString())
	}
	if req.HasVonBytes() {
		q.SetVonBytes(req.GetVonBytes())
	}

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s FooVonServiceServer) Get(ctx context.Context, req *library.FooVonGetRequest) (*library.FooVon, error) {
	q := s.Db.FooVon.Query()
	if req.HasSelect() {
		FooVonSelect(q, req.GetSelect())
	} else {
	}

	if p, err := FooVonPick(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	v, err := q.Only(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s FooVonServiceServer) Patch(ctx context.Context, req *library.FooVonPatchRequest) (*emptypb.Empty, error) {
	id, err := FooVonGetId(ctx, s.Db, req.GetKey())
	if err != nil {
		return nil, err
	}

	q := s.Db.FooVon.UpdateOneID(id)
	if req.GetVonDoubleNull() {
		q.ClearVonDouble()
	} else if req.HasVonDouble() {
		q.SetVonDouble(req.GetVonDouble())
	}
	if req.GetVonInt64Null() {
		q.ClearVonInt64()
	} else if req.HasVonInt64() {
		q.SetVonInt64(req.GetVonInt64())
	}
	if req.GetVonUint64Null() {
		q.ClearVonUint64()
	} else if req.HasVonUint64() {
		q.SetVonUint64(req.GetVonUint64())
	}
	if req.GetVonBoolNull() {
		q.ClearVonBool()
	} else if req.HasVonBool() {
		q.SetVonBool(req.GetVonBool())
	}
	if req.GetVonStringNull() {
		q.ClearVonString()
	} else if req.HasVonString() {
		q.SetVonString(req.GetVonString())
	}
	if req.GetVonBytesNull() {
		q.ClearVonBytes()
	} else if req.HasVonBytes() {
		q.SetVonBytes(req.GetVonBytes())
	}

	if _, err := q.Save(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func (s FooVonServiceServer) Erase(ctx context.Context, req *library.FooVonGetRequest) (*emptypb.Empty, error) {
	p, err := FooVonPick(req)
	if err != nil {
		return nil, err
	}
	if _, err := s.Db.FooVon.Delete().Where(p).Exec(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func FooVonPick(req *library.FooVonGetRequest) (predicate.FooVon, error) {
	switch req.WhichKey() {
	case library.FooVonGetRequest_Id_case:
		return foovon.IDEQ(req.GetId()), nil
	case library.FooVonGetRequest_Key_not_set_case:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key")
	}
}

func FooVonGetId(ctx context.Context, db *ent.Client, req *library.FooVonGetRequest) (int64, error) {
	var z int64
	if req.HasId() {
		return req.GetId(), nil
	}

	p, err := FooVonPick(req)
	if err != nil {
		return z, err
	}

	v, err := db.FooVon.Query().Where(p).OnlyID(ctx)
	if err != nil {
		return z, status.Errorf(codes.Internal, "query: %s", err)
	}

	return v, nil
}

func FooVonSelectedFields(m *library.FooVonSelect) []string {
	if m.GetAll() {
		return foovon.Columns
	}

	vs := []string{foovon.FieldID}
	if m.GetVonDouble() {
		vs = append(vs, foovon.FieldVonDouble)
	}
	if m.GetVonInt64() {
		vs = append(vs, foovon.FieldVonInt64)
	}
	if m.GetVonUint64() {
		vs = append(vs, foovon.FieldVonUint64)
	}
	if m.GetVonBool() {
		vs = append(vs, foovon.FieldVonBool)
	}
	if m.GetVonString() {
		vs = append(vs, foovon.FieldVonString)
	}
	if m.GetVonBytes() {
		vs = append(vs, foovon.FieldVonBytes)
	}

	return vs
}

func FooVonSelect(q *ent.FooVonQuery, m *library.FooVonSelect) {
	if !m.GetAll() {
		fields := FooVonSelectedFields(m)
		q.Select(fields...)
	}
}
