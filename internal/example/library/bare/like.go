// Code generated by "protoc-gen-orm-ent-grpc". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	library "github.com/lesomnus/proto-orm/internal/example/library"
	ent "github.com/lesomnus/proto-orm/internal/example/library/ent"
	like "github.com/lesomnus/proto-orm/internal/example/library/ent/like"
	predicate "github.com/lesomnus/proto-orm/internal/example/library/ent/predicate"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

type LikeServiceServer struct {
	db *ent.Client
	library.UnimplementedLikeServiceServer
}

func NewLikeServiceServer(db *ent.Client) *LikeServiceServer {
	return &LikeServiceServer{db: db}
}

func (s *LikeServiceServer) Add(ctx context.Context, req *library.LikeAddRequest) (*library.Like, error) {
	q := s.db.Like.Create()
	if v, err := uuid.FromBytes(req.Id); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.SetID(v)
	}
	q.SetDateCreated(req.DateCreated.AsTime())

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *LikeServiceServer) Get(ctx context.Context, req *library.LikeGetRequest) (*library.Like, error) {
	q := s.db.Like.Query()
	if p, err := LikePick(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	v, err := q.Only(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *LikeServiceServer) Patch(ctx context.Context, req *library.LikePatchRequest) (*library.Like, error) {
	id, err := LikeGetId(ctx, s.db, req.GetKey())
	if err != nil {
		return nil, err
	}

	q := s.db.Like.UpdateOneID(id)

	v, err := q.Save(ctx)
	if err != nil {
		return nil, StatusFromEntError(err)
	}

	return v.Proto(), nil
}

func (s *LikeServiceServer) Erase(ctx context.Context, req *library.LikeGetRequest) (*library.Like, error) {
	p, err := LikePick(req)
	if err != nil {
		return nil, err
	}
	if _, err := s.db.Like.Delete().Where(p).Exec(ctx); err != nil {
		return nil, StatusFromEntError(err)
	}

	return nil, nil
}

func LikePick(req *library.LikeGetRequest) (predicate.Like, error) {
	switch k := req.GetKey().(type) {
	case *library.LikeGetRequest_Id:
		if v, err := uuid.FromBytes(k.Id); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", "err")
		} else {
			return like.IDEQ(v), nil
		}
	case *library.LikeGetRequest_Holders:
		ps := make([]predicate.Like, 0, 2)
		if p, err := BookPick(k.Holders.GetBook()); err != nil {
			s, _ := status.FromError(err)
			return nil, status.Errorf(codes.InvalidArgument, "book.%s", s.Message())
		} else {
			ps = append(ps, like.HasBookWith(p))
		}
		if p, err := MemberPick(k.Holders.GetMember()); err != nil {
			s, _ := status.FromError(err)
			return nil, status.Errorf(codes.InvalidArgument, "member.%s", s.Message())
		} else {
			ps = append(ps, like.HasMemberWith(p))
		}
		return like.And(ps...), nil
	case nil:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key")
	}
}

func LikeGetId(ctx context.Context, db *ent.Client, req *library.LikeGetRequest) (uuid.UUID, error) {
	var z uuid.UUID
	k := req.GetKey()
	if r, ok := k.(*library.LikeGetRequest_Id); ok {
		if v, err := uuid.FromBytes(r.Id); err != nil {
			return z, status.Errorf(codes.InvalidArgument, "Id: %s", "err")
		} else {
			return v, nil
		}
	}

	p, err := LikePick(req)
	if err != nil {
		return z, err
	}

	v, err := db.Like.Query().Where(p).OnlyID(ctx)
	if err != nil {
		return z, status.Errorf(codes.Internal, "query: %s", err)
	}

	return v, nil
}
