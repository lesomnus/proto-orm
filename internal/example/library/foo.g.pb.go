// Code generated by "proto-orm-gen-ent". DO NOT EDIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.29.0
// source: example/library/foo.g.proto

package library

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FooEfAddRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_EfVAuthor   *Author                `protobuf:"bytes,11,opt,name=ef_v_author,json=efVAuthor,proto3" json:"ef_v_author,omitempty"`
	xxx_hidden_EfVdAuthor  *Author                `protobuf:"bytes,12,opt,name=ef_vd_author,json=efVdAuthor,proto3,oneof" json:"ef_vd_author,omitempty"`
	xxx_hidden_EfVrAuthor  *[]*Author             `protobuf:"bytes,13,rep,name=ef_vr_author,json=efVrAuthor,proto3" json:"ef_vr_author,omitempty"`
	xxx_hidden_EfVoAuthor  *Author                `protobuf:"bytes,14,opt,name=ef_vo_author,json=efVoAuthor,proto3,oneof" json:"ef_vo_author,omitempty"`
	xxx_hidden_EfMiAuthor  map[int64]*Author      `protobuf:"bytes,15,rep,name=ef_mi_author,json=efMiAuthor,proto3" json:"ef_mi_author,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_EfMsAuthor  map[string]*Author     `protobuf:"bytes,16,rep,name=ef_ms_author,json=efMsAuthor,proto3" json:"ef_ms_author,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_EfMsdAuthor map[string]*Author     `protobuf:"bytes,17,rep,name=ef_msd_author,json=efMsdAuthor,proto3" json:"ef_msd_author,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FooEfAddRequest) Reset() {
	*x = FooEfAddRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooEfAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooEfAddRequest) ProtoMessage() {}

func (x *FooEfAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooEfAddRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooEfAddRequest) GetEfVAuthor() *Author {
	if x != nil {
		return x.xxx_hidden_EfVAuthor
	}
	return nil
}

func (x *FooEfAddRequest) GetEfVdAuthor() *Author {
	if x != nil {
		return x.xxx_hidden_EfVdAuthor
	}
	return nil
}

func (x *FooEfAddRequest) GetEfVrAuthor() []*Author {
	if x != nil {
		if x.xxx_hidden_EfVrAuthor != nil {
			return *x.xxx_hidden_EfVrAuthor
		}
	}
	return nil
}

func (x *FooEfAddRequest) GetEfVoAuthor() *Author {
	if x != nil {
		return x.xxx_hidden_EfVoAuthor
	}
	return nil
}

func (x *FooEfAddRequest) GetEfMiAuthor() map[int64]*Author {
	if x != nil {
		return x.xxx_hidden_EfMiAuthor
	}
	return nil
}

func (x *FooEfAddRequest) GetEfMsAuthor() map[string]*Author {
	if x != nil {
		return x.xxx_hidden_EfMsAuthor
	}
	return nil
}

func (x *FooEfAddRequest) GetEfMsdAuthor() map[string]*Author {
	if x != nil {
		return x.xxx_hidden_EfMsdAuthor
	}
	return nil
}

func (x *FooEfAddRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooEfAddRequest) SetEfVAuthor(v *Author) {
	x.xxx_hidden_EfVAuthor = v
}

func (x *FooEfAddRequest) SetEfVdAuthor(v *Author) {
	x.xxx_hidden_EfVdAuthor = v
}

func (x *FooEfAddRequest) SetEfVrAuthor(v []*Author) {
	x.xxx_hidden_EfVrAuthor = &v
}

func (x *FooEfAddRequest) SetEfVoAuthor(v *Author) {
	x.xxx_hidden_EfVoAuthor = v
}

func (x *FooEfAddRequest) SetEfMiAuthor(v map[int64]*Author) {
	x.xxx_hidden_EfMiAuthor = v
}

func (x *FooEfAddRequest) SetEfMsAuthor(v map[string]*Author) {
	x.xxx_hidden_EfMsAuthor = v
}

func (x *FooEfAddRequest) SetEfMsdAuthor(v map[string]*Author) {
	x.xxx_hidden_EfMsdAuthor = v
}

func (x *FooEfAddRequest) HasEfVAuthor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EfVAuthor != nil
}

func (x *FooEfAddRequest) HasEfVdAuthor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EfVdAuthor != nil
}

func (x *FooEfAddRequest) HasEfVoAuthor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EfVoAuthor != nil
}

func (x *FooEfAddRequest) ClearEfVAuthor() {
	x.xxx_hidden_EfVAuthor = nil
}

func (x *FooEfAddRequest) ClearEfVdAuthor() {
	x.xxx_hidden_EfVdAuthor = nil
}

func (x *FooEfAddRequest) ClearEfVoAuthor() {
	x.xxx_hidden_EfVoAuthor = nil
}

type FooEfAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          int64
	EfVAuthor   *Author
	EfVdAuthor  *Author
	EfVrAuthor  []*Author
	EfVoAuthor  *Author
	EfMiAuthor  map[int64]*Author
	EfMsAuthor  map[string]*Author
	EfMsdAuthor map[string]*Author
}

func (b0 FooEfAddRequest_builder) Build() *FooEfAddRequest {
	m0 := &FooEfAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_EfVAuthor = b.EfVAuthor
	x.xxx_hidden_EfVdAuthor = b.EfVdAuthor
	x.xxx_hidden_EfVrAuthor = &b.EfVrAuthor
	x.xxx_hidden_EfVoAuthor = b.EfVoAuthor
	x.xxx_hidden_EfMiAuthor = b.EfMiAuthor
	x.xxx_hidden_EfMsAuthor = b.EfMsAuthor
	x.xxx_hidden_EfMsdAuthor = b.EfMsdAuthor
	return m0
}

type FooEfGetRequest struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isFooEfGetRequest_Key  `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FooEfGetRequest) Reset() {
	*x = FooEfGetRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooEfGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooEfGetRequest) ProtoMessage() {}

func (x *FooEfGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooEfGetRequest) GetId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*fooEfGetRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *FooEfGetRequest) SetId(v int64) {
	x.xxx_hidden_Key = &fooEfGetRequest_Id{v}
}

func (x *FooEfGetRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooEfGetRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*fooEfGetRequest_Id)
	return ok
}

func (x *FooEfGetRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooEfGetRequest) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*fooEfGetRequest_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const FooEfGetRequest_Key_not_set_case case_FooEfGetRequest_Key = 0
const FooEfGetRequest_Id_case case_FooEfGetRequest_Key = 1

func (x *FooEfGetRequest) WhichKey() case_FooEfGetRequest_Key {
	if x == nil {
		return FooEfGetRequest_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *fooEfGetRequest_Id:
		return FooEfGetRequest_Id_case
	default:
		return FooEfGetRequest_Key_not_set_case
	}
}

type FooEfGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id *int64
	// -- end of xxx_hidden_Key
}

func (b0 FooEfGetRequest_builder) Build() *FooEfGetRequest {
	m0 := &FooEfGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &fooEfGetRequest_Id{*b.Id}
	}
	return m0
}

type case_FooEfGetRequest_Key protoreflect.FieldNumber

func (x case_FooEfGetRequest_Key) String() string {
	md := file_example_library_foo_g_proto_msgTypes[1].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFooEfGetRequest_Key interface {
	isFooEfGetRequest_Key()
}

type fooEfGetRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*fooEfGetRequest_Id) isFooEfGetRequest_Key() {}

type FooEfPatchRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key         *FooEfGetRequest       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_EfVAuthor   *Author                `protobuf:"bytes,21,opt,name=ef_v_author,json=efVAuthor,proto3,oneof" json:"ef_v_author,omitempty"`
	xxx_hidden_EfVdAuthor  *Author                `protobuf:"bytes,23,opt,name=ef_vd_author,json=efVdAuthor,proto3,oneof" json:"ef_vd_author,omitempty"`
	xxx_hidden_EfVrAuthor  *[]*Author             `protobuf:"bytes,25,rep,name=ef_vr_author,json=efVrAuthor,proto3" json:"ef_vr_author,omitempty"`
	xxx_hidden_EfVoAuthor  *Author                `protobuf:"bytes,27,opt,name=ef_vo_author,json=efVoAuthor,proto3,oneof" json:"ef_vo_author,omitempty"`
	xxx_hidden_EfMiAuthor  map[int64]*Author      `protobuf:"bytes,29,rep,name=ef_mi_author,json=efMiAuthor,proto3" json:"ef_mi_author,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_EfMsAuthor  map[string]*Author     `protobuf:"bytes,31,rep,name=ef_ms_author,json=efMsAuthor,proto3" json:"ef_ms_author,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_EfMsdAuthor map[string]*Author     `protobuf:"bytes,33,rep,name=ef_msd_author,json=efMsdAuthor,proto3" json:"ef_msd_author,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FooEfPatchRequest) Reset() {
	*x = FooEfPatchRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooEfPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooEfPatchRequest) ProtoMessage() {}

func (x *FooEfPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooEfPatchRequest) GetKey() *FooEfGetRequest {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *FooEfPatchRequest) GetEfVAuthor() *Author {
	if x != nil {
		return x.xxx_hidden_EfVAuthor
	}
	return nil
}

func (x *FooEfPatchRequest) GetEfVdAuthor() *Author {
	if x != nil {
		return x.xxx_hidden_EfVdAuthor
	}
	return nil
}

func (x *FooEfPatchRequest) GetEfVrAuthor() []*Author {
	if x != nil {
		if x.xxx_hidden_EfVrAuthor != nil {
			return *x.xxx_hidden_EfVrAuthor
		}
	}
	return nil
}

func (x *FooEfPatchRequest) GetEfVoAuthor() *Author {
	if x != nil {
		return x.xxx_hidden_EfVoAuthor
	}
	return nil
}

func (x *FooEfPatchRequest) GetEfMiAuthor() map[int64]*Author {
	if x != nil {
		return x.xxx_hidden_EfMiAuthor
	}
	return nil
}

func (x *FooEfPatchRequest) GetEfMsAuthor() map[string]*Author {
	if x != nil {
		return x.xxx_hidden_EfMsAuthor
	}
	return nil
}

func (x *FooEfPatchRequest) GetEfMsdAuthor() map[string]*Author {
	if x != nil {
		return x.xxx_hidden_EfMsdAuthor
	}
	return nil
}

func (x *FooEfPatchRequest) SetKey(v *FooEfGetRequest) {
	x.xxx_hidden_Key = v
}

func (x *FooEfPatchRequest) SetEfVAuthor(v *Author) {
	x.xxx_hidden_EfVAuthor = v
}

func (x *FooEfPatchRequest) SetEfVdAuthor(v *Author) {
	x.xxx_hidden_EfVdAuthor = v
}

func (x *FooEfPatchRequest) SetEfVrAuthor(v []*Author) {
	x.xxx_hidden_EfVrAuthor = &v
}

func (x *FooEfPatchRequest) SetEfVoAuthor(v *Author) {
	x.xxx_hidden_EfVoAuthor = v
}

func (x *FooEfPatchRequest) SetEfMiAuthor(v map[int64]*Author) {
	x.xxx_hidden_EfMiAuthor = v
}

func (x *FooEfPatchRequest) SetEfMsAuthor(v map[string]*Author) {
	x.xxx_hidden_EfMsAuthor = v
}

func (x *FooEfPatchRequest) SetEfMsdAuthor(v map[string]*Author) {
	x.xxx_hidden_EfMsdAuthor = v
}

func (x *FooEfPatchRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooEfPatchRequest) HasEfVAuthor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EfVAuthor != nil
}

func (x *FooEfPatchRequest) HasEfVdAuthor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EfVdAuthor != nil
}

func (x *FooEfPatchRequest) HasEfVoAuthor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EfVoAuthor != nil
}

func (x *FooEfPatchRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooEfPatchRequest) ClearEfVAuthor() {
	x.xxx_hidden_EfVAuthor = nil
}

func (x *FooEfPatchRequest) ClearEfVdAuthor() {
	x.xxx_hidden_EfVdAuthor = nil
}

func (x *FooEfPatchRequest) ClearEfVoAuthor() {
	x.xxx_hidden_EfVoAuthor = nil
}

type FooEfPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key         *FooEfGetRequest
	EfVAuthor   *Author
	EfVdAuthor  *Author
	EfVrAuthor  []*Author
	EfVoAuthor  *Author
	EfMiAuthor  map[int64]*Author
	EfMsAuthor  map[string]*Author
	EfMsdAuthor map[string]*Author
}

func (b0 FooEfPatchRequest_builder) Build() *FooEfPatchRequest {
	m0 := &FooEfPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_EfVAuthor = b.EfVAuthor
	x.xxx_hidden_EfVdAuthor = b.EfVdAuthor
	x.xxx_hidden_EfVrAuthor = &b.EfVrAuthor
	x.xxx_hidden_EfVoAuthor = b.EfVoAuthor
	x.xxx_hidden_EfMiAuthor = b.EfMiAuthor
	x.xxx_hidden_EfMsAuthor = b.EfMsAuthor
	x.xxx_hidden_EfMsdAuthor = b.EfMsdAuthor
	return m0
}

type FooKAddRequest struct {
	state               protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_Id       int64                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_KVTime   *timestamppb.Timestamp            `protobuf:"bytes,11,opt,name=k_v_time,json=kVTime,proto3" json:"k_v_time,omitempty"`
	xxx_hidden_KVdTime  *timestamppb.Timestamp            `protobuf:"bytes,12,opt,name=k_vd_time,json=kVdTime,proto3,oneof" json:"k_vd_time,omitempty"`
	xxx_hidden_KVrTime  *[]*timestamppb.Timestamp         `protobuf:"bytes,13,rep,name=k_vr_time,json=kVrTime,proto3" json:"k_vr_time,omitempty"`
	xxx_hidden_KVoTime  *timestamppb.Timestamp            `protobuf:"bytes,14,opt,name=k_vo_time,json=kVoTime,proto3,oneof" json:"k_vo_time,omitempty"`
	xxx_hidden_KMiTime  map[int64]*timestamppb.Timestamp  `protobuf:"bytes,15,rep,name=k_mi_time,json=kMiTime,proto3" json:"k_mi_time,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_KMsTime  map[string]*timestamppb.Timestamp `protobuf:"bytes,16,rep,name=k_ms_time,json=kMsTime,proto3" json:"k_ms_time,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_KMsdTime map[string]*timestamppb.Timestamp `protobuf:"bytes,17,rep,name=k_msd_time,json=kMsdTime,proto3" json:"k_msd_time,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FooKAddRequest) Reset() {
	*x = FooKAddRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooKAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooKAddRequest) ProtoMessage() {}

func (x *FooKAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooKAddRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooKAddRequest) GetKVTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KVTime
	}
	return nil
}

func (x *FooKAddRequest) GetKVdTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KVdTime
	}
	return nil
}

func (x *FooKAddRequest) GetKVrTime() []*timestamppb.Timestamp {
	if x != nil {
		if x.xxx_hidden_KVrTime != nil {
			return *x.xxx_hidden_KVrTime
		}
	}
	return nil
}

func (x *FooKAddRequest) GetKVoTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KVoTime
	}
	return nil
}

func (x *FooKAddRequest) GetKMiTime() map[int64]*timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KMiTime
	}
	return nil
}

func (x *FooKAddRequest) GetKMsTime() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KMsTime
	}
	return nil
}

func (x *FooKAddRequest) GetKMsdTime() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KMsdTime
	}
	return nil
}

func (x *FooKAddRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooKAddRequest) SetKVTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_KVTime = v
}

func (x *FooKAddRequest) SetKVdTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_KVdTime = v
}

func (x *FooKAddRequest) SetKVrTime(v []*timestamppb.Timestamp) {
	x.xxx_hidden_KVrTime = &v
}

func (x *FooKAddRequest) SetKVoTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_KVoTime = v
}

func (x *FooKAddRequest) SetKMiTime(v map[int64]*timestamppb.Timestamp) {
	x.xxx_hidden_KMiTime = v
}

func (x *FooKAddRequest) SetKMsTime(v map[string]*timestamppb.Timestamp) {
	x.xxx_hidden_KMsTime = v
}

func (x *FooKAddRequest) SetKMsdTime(v map[string]*timestamppb.Timestamp) {
	x.xxx_hidden_KMsdTime = v
}

func (x *FooKAddRequest) HasKVTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KVTime != nil
}

func (x *FooKAddRequest) HasKVdTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KVdTime != nil
}

func (x *FooKAddRequest) HasKVoTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KVoTime != nil
}

func (x *FooKAddRequest) ClearKVTime() {
	x.xxx_hidden_KVTime = nil
}

func (x *FooKAddRequest) ClearKVdTime() {
	x.xxx_hidden_KVdTime = nil
}

func (x *FooKAddRequest) ClearKVoTime() {
	x.xxx_hidden_KVoTime = nil
}

type FooKAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       int64
	KVTime   *timestamppb.Timestamp
	KVdTime  *timestamppb.Timestamp
	KVrTime  []*timestamppb.Timestamp
	KVoTime  *timestamppb.Timestamp
	KMiTime  map[int64]*timestamppb.Timestamp
	KMsTime  map[string]*timestamppb.Timestamp
	KMsdTime map[string]*timestamppb.Timestamp
}

func (b0 FooKAddRequest_builder) Build() *FooKAddRequest {
	m0 := &FooKAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_KVTime = b.KVTime
	x.xxx_hidden_KVdTime = b.KVdTime
	x.xxx_hidden_KVrTime = &b.KVrTime
	x.xxx_hidden_KVoTime = b.KVoTime
	x.xxx_hidden_KMiTime = b.KMiTime
	x.xxx_hidden_KMsTime = b.KMsTime
	x.xxx_hidden_KMsdTime = b.KMsdTime
	return m0
}

type FooKGetRequest struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isFooKGetRequest_Key   `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FooKGetRequest) Reset() {
	*x = FooKGetRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooKGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooKGetRequest) ProtoMessage() {}

func (x *FooKGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooKGetRequest) GetId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*fooKGetRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *FooKGetRequest) SetId(v int64) {
	x.xxx_hidden_Key = &fooKGetRequest_Id{v}
}

func (x *FooKGetRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooKGetRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*fooKGetRequest_Id)
	return ok
}

func (x *FooKGetRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooKGetRequest) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*fooKGetRequest_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const FooKGetRequest_Key_not_set_case case_FooKGetRequest_Key = 0
const FooKGetRequest_Id_case case_FooKGetRequest_Key = 1

func (x *FooKGetRequest) WhichKey() case_FooKGetRequest_Key {
	if x == nil {
		return FooKGetRequest_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *fooKGetRequest_Id:
		return FooKGetRequest_Id_case
	default:
		return FooKGetRequest_Key_not_set_case
	}
}

type FooKGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id *int64
	// -- end of xxx_hidden_Key
}

func (b0 FooKGetRequest_builder) Build() *FooKGetRequest {
	m0 := &FooKGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &fooKGetRequest_Id{*b.Id}
	}
	return m0
}

type case_FooKGetRequest_Key protoreflect.FieldNumber

func (x case_FooKGetRequest_Key) String() string {
	md := file_example_library_foo_g_proto_msgTypes[4].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFooKGetRequest_Key interface {
	isFooKGetRequest_Key()
}

type fooKGetRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*fooKGetRequest_Id) isFooKGetRequest_Key() {}

type FooKPatchRequest struct {
	state               protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_Key      *FooKGetRequest                   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_KVTime   *timestamppb.Timestamp            `protobuf:"bytes,21,opt,name=k_v_time,json=kVTime,proto3,oneof" json:"k_v_time,omitempty"`
	xxx_hidden_KVdTime  *timestamppb.Timestamp            `protobuf:"bytes,23,opt,name=k_vd_time,json=kVdTime,proto3,oneof" json:"k_vd_time,omitempty"`
	xxx_hidden_KVrTime  *[]*timestamppb.Timestamp         `protobuf:"bytes,25,rep,name=k_vr_time,json=kVrTime,proto3" json:"k_vr_time,omitempty"`
	xxx_hidden_KVoTime  *timestamppb.Timestamp            `protobuf:"bytes,27,opt,name=k_vo_time,json=kVoTime,proto3,oneof" json:"k_vo_time,omitempty"`
	xxx_hidden_KMiTime  map[int64]*timestamppb.Timestamp  `protobuf:"bytes,29,rep,name=k_mi_time,json=kMiTime,proto3" json:"k_mi_time,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_KMsTime  map[string]*timestamppb.Timestamp `protobuf:"bytes,31,rep,name=k_ms_time,json=kMsTime,proto3" json:"k_ms_time,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_KMsdTime map[string]*timestamppb.Timestamp `protobuf:"bytes,33,rep,name=k_msd_time,json=kMsdTime,proto3" json:"k_msd_time,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FooKPatchRequest) Reset() {
	*x = FooKPatchRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooKPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooKPatchRequest) ProtoMessage() {}

func (x *FooKPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooKPatchRequest) GetKey() *FooKGetRequest {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *FooKPatchRequest) GetKVTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KVTime
	}
	return nil
}

func (x *FooKPatchRequest) GetKVdTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KVdTime
	}
	return nil
}

func (x *FooKPatchRequest) GetKVrTime() []*timestamppb.Timestamp {
	if x != nil {
		if x.xxx_hidden_KVrTime != nil {
			return *x.xxx_hidden_KVrTime
		}
	}
	return nil
}

func (x *FooKPatchRequest) GetKVoTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KVoTime
	}
	return nil
}

func (x *FooKPatchRequest) GetKMiTime() map[int64]*timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KMiTime
	}
	return nil
}

func (x *FooKPatchRequest) GetKMsTime() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KMsTime
	}
	return nil
}

func (x *FooKPatchRequest) GetKMsdTime() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_KMsdTime
	}
	return nil
}

func (x *FooKPatchRequest) SetKey(v *FooKGetRequest) {
	x.xxx_hidden_Key = v
}

func (x *FooKPatchRequest) SetKVTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_KVTime = v
}

func (x *FooKPatchRequest) SetKVdTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_KVdTime = v
}

func (x *FooKPatchRequest) SetKVrTime(v []*timestamppb.Timestamp) {
	x.xxx_hidden_KVrTime = &v
}

func (x *FooKPatchRequest) SetKVoTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_KVoTime = v
}

func (x *FooKPatchRequest) SetKMiTime(v map[int64]*timestamppb.Timestamp) {
	x.xxx_hidden_KMiTime = v
}

func (x *FooKPatchRequest) SetKMsTime(v map[string]*timestamppb.Timestamp) {
	x.xxx_hidden_KMsTime = v
}

func (x *FooKPatchRequest) SetKMsdTime(v map[string]*timestamppb.Timestamp) {
	x.xxx_hidden_KMsdTime = v
}

func (x *FooKPatchRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooKPatchRequest) HasKVTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KVTime != nil
}

func (x *FooKPatchRequest) HasKVdTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KVdTime != nil
}

func (x *FooKPatchRequest) HasKVoTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KVoTime != nil
}

func (x *FooKPatchRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooKPatchRequest) ClearKVTime() {
	x.xxx_hidden_KVTime = nil
}

func (x *FooKPatchRequest) ClearKVdTime() {
	x.xxx_hidden_KVdTime = nil
}

func (x *FooKPatchRequest) ClearKVoTime() {
	x.xxx_hidden_KVoTime = nil
}

type FooKPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key      *FooKGetRequest
	KVTime   *timestamppb.Timestamp
	KVdTime  *timestamppb.Timestamp
	KVrTime  []*timestamppb.Timestamp
	KVoTime  *timestamppb.Timestamp
	KMiTime  map[int64]*timestamppb.Timestamp
	KMsTime  map[string]*timestamppb.Timestamp
	KMsdTime map[string]*timestamppb.Timestamp
}

func (b0 FooKPatchRequest_builder) Build() *FooKPatchRequest {
	m0 := &FooKPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_KVTime = b.KVTime
	x.xxx_hidden_KVdTime = b.KVdTime
	x.xxx_hidden_KVrTime = &b.KVrTime
	x.xxx_hidden_KVoTime = b.KVoTime
	x.xxx_hidden_KMiTime = b.KMiTime
	x.xxx_hidden_KMsTime = b.KMsTime
	x.xxx_hidden_KMsdTime = b.KMsdTime
	return m0
}

type FooMiAddRequest struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_VmiDouble map[int64]float64      `protobuf:"bytes,11,rep,name=vmi_double,json=vmiDouble,proto3" json:"vmi_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	xxx_hidden_VmiInt64  map[int64]int64        `protobuf:"bytes,12,rep,name=vmi_int64,json=vmiInt64,proto3" json:"vmi_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmiUint64 map[int64]uint64       `protobuf:"bytes,13,rep,name=vmi_uint64,json=vmiUint64,proto3" json:"vmi_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmiBool   map[int64]bool         `protobuf:"bytes,14,rep,name=vmi_bool,json=vmiBool,proto3" json:"vmi_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmiString map[int64]string       `protobuf:"bytes,15,rep,name=vmi_string,json=vmiString,proto3" json:"vmi_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_VmiBytes  map[int64][]byte       `protobuf:"bytes,16,rep,name=vmi_bytes,json=vmiBytes,proto3" json:"vmi_bytes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FooMiAddRequest) Reset() {
	*x = FooMiAddRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMiAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMiAddRequest) ProtoMessage() {}

func (x *FooMiAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMiAddRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooMiAddRequest) GetVmiDouble() map[int64]float64 {
	if x != nil {
		return x.xxx_hidden_VmiDouble
	}
	return nil
}

func (x *FooMiAddRequest) GetVmiInt64() map[int64]int64 {
	if x != nil {
		return x.xxx_hidden_VmiInt64
	}
	return nil
}

func (x *FooMiAddRequest) GetVmiUint64() map[int64]uint64 {
	if x != nil {
		return x.xxx_hidden_VmiUint64
	}
	return nil
}

func (x *FooMiAddRequest) GetVmiBool() map[int64]bool {
	if x != nil {
		return x.xxx_hidden_VmiBool
	}
	return nil
}

func (x *FooMiAddRequest) GetVmiString() map[int64]string {
	if x != nil {
		return x.xxx_hidden_VmiString
	}
	return nil
}

func (x *FooMiAddRequest) GetVmiBytes() map[int64][]byte {
	if x != nil {
		return x.xxx_hidden_VmiBytes
	}
	return nil
}

func (x *FooMiAddRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooMiAddRequest) SetVmiDouble(v map[int64]float64) {
	x.xxx_hidden_VmiDouble = v
}

func (x *FooMiAddRequest) SetVmiInt64(v map[int64]int64) {
	x.xxx_hidden_VmiInt64 = v
}

func (x *FooMiAddRequest) SetVmiUint64(v map[int64]uint64) {
	x.xxx_hidden_VmiUint64 = v
}

func (x *FooMiAddRequest) SetVmiBool(v map[int64]bool) {
	x.xxx_hidden_VmiBool = v
}

func (x *FooMiAddRequest) SetVmiString(v map[int64]string) {
	x.xxx_hidden_VmiString = v
}

func (x *FooMiAddRequest) SetVmiBytes(v map[int64][]byte) {
	x.xxx_hidden_VmiBytes = v
}

type FooMiAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        int64
	VmiDouble map[int64]float64
	VmiInt64  map[int64]int64
	VmiUint64 map[int64]uint64
	VmiBool   map[int64]bool
	VmiString map[int64]string
	VmiBytes  map[int64][]byte
}

func (b0 FooMiAddRequest_builder) Build() *FooMiAddRequest {
	m0 := &FooMiAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_VmiDouble = b.VmiDouble
	x.xxx_hidden_VmiInt64 = b.VmiInt64
	x.xxx_hidden_VmiUint64 = b.VmiUint64
	x.xxx_hidden_VmiBool = b.VmiBool
	x.xxx_hidden_VmiString = b.VmiString
	x.xxx_hidden_VmiBytes = b.VmiBytes
	return m0
}

type FooMiGetRequest struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isFooMiGetRequest_Key  `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FooMiGetRequest) Reset() {
	*x = FooMiGetRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMiGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMiGetRequest) ProtoMessage() {}

func (x *FooMiGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMiGetRequest) GetId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*fooMiGetRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *FooMiGetRequest) SetId(v int64) {
	x.xxx_hidden_Key = &fooMiGetRequest_Id{v}
}

func (x *FooMiGetRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooMiGetRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*fooMiGetRequest_Id)
	return ok
}

func (x *FooMiGetRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooMiGetRequest) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*fooMiGetRequest_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const FooMiGetRequest_Key_not_set_case case_FooMiGetRequest_Key = 0
const FooMiGetRequest_Id_case case_FooMiGetRequest_Key = 1

func (x *FooMiGetRequest) WhichKey() case_FooMiGetRequest_Key {
	if x == nil {
		return FooMiGetRequest_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *fooMiGetRequest_Id:
		return FooMiGetRequest_Id_case
	default:
		return FooMiGetRequest_Key_not_set_case
	}
}

type FooMiGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id *int64
	// -- end of xxx_hidden_Key
}

func (b0 FooMiGetRequest_builder) Build() *FooMiGetRequest {
	m0 := &FooMiGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &fooMiGetRequest_Id{*b.Id}
	}
	return m0
}

type case_FooMiGetRequest_Key protoreflect.FieldNumber

func (x case_FooMiGetRequest_Key) String() string {
	md := file_example_library_foo_g_proto_msgTypes[7].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFooMiGetRequest_Key interface {
	isFooMiGetRequest_Key()
}

type fooMiGetRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*fooMiGetRequest_Id) isFooMiGetRequest_Key() {}

type FooMiPatchRequest struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key       *FooMiGetRequest       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_VmiDouble map[int64]float64      `protobuf:"bytes,21,rep,name=vmi_double,json=vmiDouble,proto3" json:"vmi_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	xxx_hidden_VmiInt64  map[int64]int64        `protobuf:"bytes,23,rep,name=vmi_int64,json=vmiInt64,proto3" json:"vmi_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmiUint64 map[int64]uint64       `protobuf:"bytes,25,rep,name=vmi_uint64,json=vmiUint64,proto3" json:"vmi_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmiBool   map[int64]bool         `protobuf:"bytes,27,rep,name=vmi_bool,json=vmiBool,proto3" json:"vmi_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmiString map[int64]string       `protobuf:"bytes,29,rep,name=vmi_string,json=vmiString,proto3" json:"vmi_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_VmiBytes  map[int64][]byte       `protobuf:"bytes,31,rep,name=vmi_bytes,json=vmiBytes,proto3" json:"vmi_bytes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FooMiPatchRequest) Reset() {
	*x = FooMiPatchRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMiPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMiPatchRequest) ProtoMessage() {}

func (x *FooMiPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMiPatchRequest) GetKey() *FooMiGetRequest {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *FooMiPatchRequest) GetVmiDouble() map[int64]float64 {
	if x != nil {
		return x.xxx_hidden_VmiDouble
	}
	return nil
}

func (x *FooMiPatchRequest) GetVmiInt64() map[int64]int64 {
	if x != nil {
		return x.xxx_hidden_VmiInt64
	}
	return nil
}

func (x *FooMiPatchRequest) GetVmiUint64() map[int64]uint64 {
	if x != nil {
		return x.xxx_hidden_VmiUint64
	}
	return nil
}

func (x *FooMiPatchRequest) GetVmiBool() map[int64]bool {
	if x != nil {
		return x.xxx_hidden_VmiBool
	}
	return nil
}

func (x *FooMiPatchRequest) GetVmiString() map[int64]string {
	if x != nil {
		return x.xxx_hidden_VmiString
	}
	return nil
}

func (x *FooMiPatchRequest) GetVmiBytes() map[int64][]byte {
	if x != nil {
		return x.xxx_hidden_VmiBytes
	}
	return nil
}

func (x *FooMiPatchRequest) SetKey(v *FooMiGetRequest) {
	x.xxx_hidden_Key = v
}

func (x *FooMiPatchRequest) SetVmiDouble(v map[int64]float64) {
	x.xxx_hidden_VmiDouble = v
}

func (x *FooMiPatchRequest) SetVmiInt64(v map[int64]int64) {
	x.xxx_hidden_VmiInt64 = v
}

func (x *FooMiPatchRequest) SetVmiUint64(v map[int64]uint64) {
	x.xxx_hidden_VmiUint64 = v
}

func (x *FooMiPatchRequest) SetVmiBool(v map[int64]bool) {
	x.xxx_hidden_VmiBool = v
}

func (x *FooMiPatchRequest) SetVmiString(v map[int64]string) {
	x.xxx_hidden_VmiString = v
}

func (x *FooMiPatchRequest) SetVmiBytes(v map[int64][]byte) {
	x.xxx_hidden_VmiBytes = v
}

func (x *FooMiPatchRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooMiPatchRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

type FooMiPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key       *FooMiGetRequest
	VmiDouble map[int64]float64
	VmiInt64  map[int64]int64
	VmiUint64 map[int64]uint64
	VmiBool   map[int64]bool
	VmiString map[int64]string
	VmiBytes  map[int64][]byte
}

func (b0 FooMiPatchRequest_builder) Build() *FooMiPatchRequest {
	m0 := &FooMiPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_VmiDouble = b.VmiDouble
	x.xxx_hidden_VmiInt64 = b.VmiInt64
	x.xxx_hidden_VmiUint64 = b.VmiUint64
	x.xxx_hidden_VmiBool = b.VmiBool
	x.xxx_hidden_VmiString = b.VmiString
	x.xxx_hidden_VmiBytes = b.VmiBytes
	return m0
}

type FooMsAddRequest struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_VmsDouble map[string]float64     `protobuf:"bytes,11,rep,name=vms_double,json=vmsDouble,proto3" json:"vms_double,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	xxx_hidden_VmsInt64  map[string]int64       `protobuf:"bytes,12,rep,name=vms_int64,json=vmsInt64,proto3" json:"vms_int64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmsUint64 map[string]uint64      `protobuf:"bytes,13,rep,name=vms_uint64,json=vmsUint64,proto3" json:"vms_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmsBool   map[string]bool        `protobuf:"bytes,14,rep,name=vms_bool,json=vmsBool,proto3" json:"vms_bool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmsString map[string]string      `protobuf:"bytes,15,rep,name=vms_string,json=vmsString,proto3" json:"vms_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_VmsBytes  map[string][]byte      `protobuf:"bytes,16,rep,name=vms_bytes,json=vmsBytes,proto3" json:"vms_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FooMsAddRequest) Reset() {
	*x = FooMsAddRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMsAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMsAddRequest) ProtoMessage() {}

func (x *FooMsAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMsAddRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooMsAddRequest) GetVmsDouble() map[string]float64 {
	if x != nil {
		return x.xxx_hidden_VmsDouble
	}
	return nil
}

func (x *FooMsAddRequest) GetVmsInt64() map[string]int64 {
	if x != nil {
		return x.xxx_hidden_VmsInt64
	}
	return nil
}

func (x *FooMsAddRequest) GetVmsUint64() map[string]uint64 {
	if x != nil {
		return x.xxx_hidden_VmsUint64
	}
	return nil
}

func (x *FooMsAddRequest) GetVmsBool() map[string]bool {
	if x != nil {
		return x.xxx_hidden_VmsBool
	}
	return nil
}

func (x *FooMsAddRequest) GetVmsString() map[string]string {
	if x != nil {
		return x.xxx_hidden_VmsString
	}
	return nil
}

func (x *FooMsAddRequest) GetVmsBytes() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_VmsBytes
	}
	return nil
}

func (x *FooMsAddRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooMsAddRequest) SetVmsDouble(v map[string]float64) {
	x.xxx_hidden_VmsDouble = v
}

func (x *FooMsAddRequest) SetVmsInt64(v map[string]int64) {
	x.xxx_hidden_VmsInt64 = v
}

func (x *FooMsAddRequest) SetVmsUint64(v map[string]uint64) {
	x.xxx_hidden_VmsUint64 = v
}

func (x *FooMsAddRequest) SetVmsBool(v map[string]bool) {
	x.xxx_hidden_VmsBool = v
}

func (x *FooMsAddRequest) SetVmsString(v map[string]string) {
	x.xxx_hidden_VmsString = v
}

func (x *FooMsAddRequest) SetVmsBytes(v map[string][]byte) {
	x.xxx_hidden_VmsBytes = v
}

type FooMsAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        int64
	VmsDouble map[string]float64
	VmsInt64  map[string]int64
	VmsUint64 map[string]uint64
	VmsBool   map[string]bool
	VmsString map[string]string
	VmsBytes  map[string][]byte
}

func (b0 FooMsAddRequest_builder) Build() *FooMsAddRequest {
	m0 := &FooMsAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_VmsDouble = b.VmsDouble
	x.xxx_hidden_VmsInt64 = b.VmsInt64
	x.xxx_hidden_VmsUint64 = b.VmsUint64
	x.xxx_hidden_VmsBool = b.VmsBool
	x.xxx_hidden_VmsString = b.VmsString
	x.xxx_hidden_VmsBytes = b.VmsBytes
	return m0
}

type FooMsGetRequest struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isFooMsGetRequest_Key  `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FooMsGetRequest) Reset() {
	*x = FooMsGetRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMsGetRequest) ProtoMessage() {}

func (x *FooMsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMsGetRequest) GetId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*fooMsGetRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *FooMsGetRequest) SetId(v int64) {
	x.xxx_hidden_Key = &fooMsGetRequest_Id{v}
}

func (x *FooMsGetRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooMsGetRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*fooMsGetRequest_Id)
	return ok
}

func (x *FooMsGetRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooMsGetRequest) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*fooMsGetRequest_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const FooMsGetRequest_Key_not_set_case case_FooMsGetRequest_Key = 0
const FooMsGetRequest_Id_case case_FooMsGetRequest_Key = 1

func (x *FooMsGetRequest) WhichKey() case_FooMsGetRequest_Key {
	if x == nil {
		return FooMsGetRequest_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *fooMsGetRequest_Id:
		return FooMsGetRequest_Id_case
	default:
		return FooMsGetRequest_Key_not_set_case
	}
}

type FooMsGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id *int64
	// -- end of xxx_hidden_Key
}

func (b0 FooMsGetRequest_builder) Build() *FooMsGetRequest {
	m0 := &FooMsGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &fooMsGetRequest_Id{*b.Id}
	}
	return m0
}

type case_FooMsGetRequest_Key protoreflect.FieldNumber

func (x case_FooMsGetRequest_Key) String() string {
	md := file_example_library_foo_g_proto_msgTypes[10].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFooMsGetRequest_Key interface {
	isFooMsGetRequest_Key()
}

type fooMsGetRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*fooMsGetRequest_Id) isFooMsGetRequest_Key() {}

type FooMsPatchRequest struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key       *FooMsGetRequest       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_VmsDouble map[string]float64     `protobuf:"bytes,21,rep,name=vms_double,json=vmsDouble,proto3" json:"vms_double,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	xxx_hidden_VmsInt64  map[string]int64       `protobuf:"bytes,23,rep,name=vms_int64,json=vmsInt64,proto3" json:"vms_int64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmsUint64 map[string]uint64      `protobuf:"bytes,25,rep,name=vms_uint64,json=vmsUint64,proto3" json:"vms_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmsBool   map[string]bool        `protobuf:"bytes,27,rep,name=vms_bool,json=vmsBool,proto3" json:"vms_bool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_VmsString map[string]string      `protobuf:"bytes,29,rep,name=vms_string,json=vmsString,proto3" json:"vms_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_VmsBytes  map[string][]byte      `protobuf:"bytes,31,rep,name=vms_bytes,json=vmsBytes,proto3" json:"vms_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FooMsPatchRequest) Reset() {
	*x = FooMsPatchRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMsPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMsPatchRequest) ProtoMessage() {}

func (x *FooMsPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMsPatchRequest) GetKey() *FooMsGetRequest {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *FooMsPatchRequest) GetVmsDouble() map[string]float64 {
	if x != nil {
		return x.xxx_hidden_VmsDouble
	}
	return nil
}

func (x *FooMsPatchRequest) GetVmsInt64() map[string]int64 {
	if x != nil {
		return x.xxx_hidden_VmsInt64
	}
	return nil
}

func (x *FooMsPatchRequest) GetVmsUint64() map[string]uint64 {
	if x != nil {
		return x.xxx_hidden_VmsUint64
	}
	return nil
}

func (x *FooMsPatchRequest) GetVmsBool() map[string]bool {
	if x != nil {
		return x.xxx_hidden_VmsBool
	}
	return nil
}

func (x *FooMsPatchRequest) GetVmsString() map[string]string {
	if x != nil {
		return x.xxx_hidden_VmsString
	}
	return nil
}

func (x *FooMsPatchRequest) GetVmsBytes() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_VmsBytes
	}
	return nil
}

func (x *FooMsPatchRequest) SetKey(v *FooMsGetRequest) {
	x.xxx_hidden_Key = v
}

func (x *FooMsPatchRequest) SetVmsDouble(v map[string]float64) {
	x.xxx_hidden_VmsDouble = v
}

func (x *FooMsPatchRequest) SetVmsInt64(v map[string]int64) {
	x.xxx_hidden_VmsInt64 = v
}

func (x *FooMsPatchRequest) SetVmsUint64(v map[string]uint64) {
	x.xxx_hidden_VmsUint64 = v
}

func (x *FooMsPatchRequest) SetVmsBool(v map[string]bool) {
	x.xxx_hidden_VmsBool = v
}

func (x *FooMsPatchRequest) SetVmsString(v map[string]string) {
	x.xxx_hidden_VmsString = v
}

func (x *FooMsPatchRequest) SetVmsBytes(v map[string][]byte) {
	x.xxx_hidden_VmsBytes = v
}

func (x *FooMsPatchRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooMsPatchRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

type FooMsPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key       *FooMsGetRequest
	VmsDouble map[string]float64
	VmsInt64  map[string]int64
	VmsUint64 map[string]uint64
	VmsBool   map[string]bool
	VmsString map[string]string
	VmsBytes  map[string][]byte
}

func (b0 FooMsPatchRequest_builder) Build() *FooMsPatchRequest {
	m0 := &FooMsPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_VmsDouble = b.VmsDouble
	x.xxx_hidden_VmsInt64 = b.VmsInt64
	x.xxx_hidden_VmsUint64 = b.VmsUint64
	x.xxx_hidden_VmsBool = b.VmsBool
	x.xxx_hidden_VmsString = b.VmsString
	x.xxx_hidden_VmsBytes = b.VmsBytes
	return m0
}

type FooMsdAddRequest struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_MsdDouble map[string]float64     `protobuf:"bytes,11,rep,name=msd_double,json=msdDouble,proto3" json:"msd_double,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	xxx_hidden_MsdInt64  map[string]int64       `protobuf:"bytes,12,rep,name=msd_int64,json=msdInt64,proto3" json:"msd_int64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_MsdUint64 map[string]uint64      `protobuf:"bytes,13,rep,name=msd_uint64,json=msdUint64,proto3" json:"msd_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_MsdBool   map[string]bool        `protobuf:"bytes,14,rep,name=msd_bool,json=msdBool,proto3" json:"msd_bool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_MsdString map[string]string      `protobuf:"bytes,15,rep,name=msd_string,json=msdString,proto3" json:"msd_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_MsdBytes  map[string][]byte      `protobuf:"bytes,16,rep,name=msd_bytes,json=msdBytes,proto3" json:"msd_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FooMsdAddRequest) Reset() {
	*x = FooMsdAddRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMsdAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMsdAddRequest) ProtoMessage() {}

func (x *FooMsdAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMsdAddRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooMsdAddRequest) GetMsdDouble() map[string]float64 {
	if x != nil {
		return x.xxx_hidden_MsdDouble
	}
	return nil
}

func (x *FooMsdAddRequest) GetMsdInt64() map[string]int64 {
	if x != nil {
		return x.xxx_hidden_MsdInt64
	}
	return nil
}

func (x *FooMsdAddRequest) GetMsdUint64() map[string]uint64 {
	if x != nil {
		return x.xxx_hidden_MsdUint64
	}
	return nil
}

func (x *FooMsdAddRequest) GetMsdBool() map[string]bool {
	if x != nil {
		return x.xxx_hidden_MsdBool
	}
	return nil
}

func (x *FooMsdAddRequest) GetMsdString() map[string]string {
	if x != nil {
		return x.xxx_hidden_MsdString
	}
	return nil
}

func (x *FooMsdAddRequest) GetMsdBytes() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_MsdBytes
	}
	return nil
}

func (x *FooMsdAddRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooMsdAddRequest) SetMsdDouble(v map[string]float64) {
	x.xxx_hidden_MsdDouble = v
}

func (x *FooMsdAddRequest) SetMsdInt64(v map[string]int64) {
	x.xxx_hidden_MsdInt64 = v
}

func (x *FooMsdAddRequest) SetMsdUint64(v map[string]uint64) {
	x.xxx_hidden_MsdUint64 = v
}

func (x *FooMsdAddRequest) SetMsdBool(v map[string]bool) {
	x.xxx_hidden_MsdBool = v
}

func (x *FooMsdAddRequest) SetMsdString(v map[string]string) {
	x.xxx_hidden_MsdString = v
}

func (x *FooMsdAddRequest) SetMsdBytes(v map[string][]byte) {
	x.xxx_hidden_MsdBytes = v
}

type FooMsdAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        int64
	MsdDouble map[string]float64
	MsdInt64  map[string]int64
	MsdUint64 map[string]uint64
	MsdBool   map[string]bool
	MsdString map[string]string
	MsdBytes  map[string][]byte
}

func (b0 FooMsdAddRequest_builder) Build() *FooMsdAddRequest {
	m0 := &FooMsdAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_MsdDouble = b.MsdDouble
	x.xxx_hidden_MsdInt64 = b.MsdInt64
	x.xxx_hidden_MsdUint64 = b.MsdUint64
	x.xxx_hidden_MsdBool = b.MsdBool
	x.xxx_hidden_MsdString = b.MsdString
	x.xxx_hidden_MsdBytes = b.MsdBytes
	return m0
}

type FooMsdGetRequest struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isFooMsdGetRequest_Key `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FooMsdGetRequest) Reset() {
	*x = FooMsdGetRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMsdGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMsdGetRequest) ProtoMessage() {}

func (x *FooMsdGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMsdGetRequest) GetId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*fooMsdGetRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *FooMsdGetRequest) SetId(v int64) {
	x.xxx_hidden_Key = &fooMsdGetRequest_Id{v}
}

func (x *FooMsdGetRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooMsdGetRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*fooMsdGetRequest_Id)
	return ok
}

func (x *FooMsdGetRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooMsdGetRequest) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*fooMsdGetRequest_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const FooMsdGetRequest_Key_not_set_case case_FooMsdGetRequest_Key = 0
const FooMsdGetRequest_Id_case case_FooMsdGetRequest_Key = 1

func (x *FooMsdGetRequest) WhichKey() case_FooMsdGetRequest_Key {
	if x == nil {
		return FooMsdGetRequest_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *fooMsdGetRequest_Id:
		return FooMsdGetRequest_Id_case
	default:
		return FooMsdGetRequest_Key_not_set_case
	}
}

type FooMsdGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id *int64
	// -- end of xxx_hidden_Key
}

func (b0 FooMsdGetRequest_builder) Build() *FooMsdGetRequest {
	m0 := &FooMsdGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &fooMsdGetRequest_Id{*b.Id}
	}
	return m0
}

type case_FooMsdGetRequest_Key protoreflect.FieldNumber

func (x case_FooMsdGetRequest_Key) String() string {
	md := file_example_library_foo_g_proto_msgTypes[13].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFooMsdGetRequest_Key interface {
	isFooMsdGetRequest_Key()
}

type fooMsdGetRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*fooMsdGetRequest_Id) isFooMsdGetRequest_Key() {}

type FooMsdPatchRequest struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key       *FooMsdGetRequest      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_MsdDouble map[string]float64     `protobuf:"bytes,21,rep,name=msd_double,json=msdDouble,proto3" json:"msd_double,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	xxx_hidden_MsdInt64  map[string]int64       `protobuf:"bytes,23,rep,name=msd_int64,json=msdInt64,proto3" json:"msd_int64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_MsdUint64 map[string]uint64      `protobuf:"bytes,25,rep,name=msd_uint64,json=msdUint64,proto3" json:"msd_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_MsdBool   map[string]bool        `protobuf:"bytes,27,rep,name=msd_bool,json=msdBool,proto3" json:"msd_bool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_MsdString map[string]string      `protobuf:"bytes,29,rep,name=msd_string,json=msdString,proto3" json:"msd_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_MsdBytes  map[string][]byte      `protobuf:"bytes,31,rep,name=msd_bytes,json=msdBytes,proto3" json:"msd_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FooMsdPatchRequest) Reset() {
	*x = FooMsdPatchRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooMsdPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooMsdPatchRequest) ProtoMessage() {}

func (x *FooMsdPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooMsdPatchRequest) GetKey() *FooMsdGetRequest {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *FooMsdPatchRequest) GetMsdDouble() map[string]float64 {
	if x != nil {
		return x.xxx_hidden_MsdDouble
	}
	return nil
}

func (x *FooMsdPatchRequest) GetMsdInt64() map[string]int64 {
	if x != nil {
		return x.xxx_hidden_MsdInt64
	}
	return nil
}

func (x *FooMsdPatchRequest) GetMsdUint64() map[string]uint64 {
	if x != nil {
		return x.xxx_hidden_MsdUint64
	}
	return nil
}

func (x *FooMsdPatchRequest) GetMsdBool() map[string]bool {
	if x != nil {
		return x.xxx_hidden_MsdBool
	}
	return nil
}

func (x *FooMsdPatchRequest) GetMsdString() map[string]string {
	if x != nil {
		return x.xxx_hidden_MsdString
	}
	return nil
}

func (x *FooMsdPatchRequest) GetMsdBytes() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_MsdBytes
	}
	return nil
}

func (x *FooMsdPatchRequest) SetKey(v *FooMsdGetRequest) {
	x.xxx_hidden_Key = v
}

func (x *FooMsdPatchRequest) SetMsdDouble(v map[string]float64) {
	x.xxx_hidden_MsdDouble = v
}

func (x *FooMsdPatchRequest) SetMsdInt64(v map[string]int64) {
	x.xxx_hidden_MsdInt64 = v
}

func (x *FooMsdPatchRequest) SetMsdUint64(v map[string]uint64) {
	x.xxx_hidden_MsdUint64 = v
}

func (x *FooMsdPatchRequest) SetMsdBool(v map[string]bool) {
	x.xxx_hidden_MsdBool = v
}

func (x *FooMsdPatchRequest) SetMsdString(v map[string]string) {
	x.xxx_hidden_MsdString = v
}

func (x *FooMsdPatchRequest) SetMsdBytes(v map[string][]byte) {
	x.xxx_hidden_MsdBytes = v
}

func (x *FooMsdPatchRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooMsdPatchRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

type FooMsdPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key       *FooMsdGetRequest
	MsdDouble map[string]float64
	MsdInt64  map[string]int64
	MsdUint64 map[string]uint64
	MsdBool   map[string]bool
	MsdString map[string]string
	MsdBytes  map[string][]byte
}

func (b0 FooMsdPatchRequest_builder) Build() *FooMsdPatchRequest {
	m0 := &FooMsdPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_MsdDouble = b.MsdDouble
	x.xxx_hidden_MsdInt64 = b.MsdInt64
	x.xxx_hidden_MsdUint64 = b.MsdUint64
	x.xxx_hidden_MsdBool = b.MsdBool
	x.xxx_hidden_MsdString = b.MsdString
	x.xxx_hidden_MsdBytes = b.MsdBytes
	return m0
}

type FooVAddRequest struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id      int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_VDouble float64                `protobuf:"fixed64,11,opt,name=v_double,json=vDouble,proto3" json:"v_double,omitempty"`
	xxx_hidden_VInt64  int64                  `protobuf:"varint,12,opt,name=v_int64,json=vInt64,proto3" json:"v_int64,omitempty"`
	xxx_hidden_VUint64 uint64                 `protobuf:"varint,13,opt,name=v_uint64,json=vUint64,proto3" json:"v_uint64,omitempty"`
	xxx_hidden_VBool   bool                   `protobuf:"varint,14,opt,name=v_bool,json=vBool,proto3" json:"v_bool,omitempty"`
	xxx_hidden_VString string                 `protobuf:"bytes,15,opt,name=v_string,json=vString,proto3" json:"v_string,omitempty"`
	xxx_hidden_VBytes  []byte                 `protobuf:"bytes,16,opt,name=v_bytes,json=vBytes,proto3" json:"v_bytes,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FooVAddRequest) Reset() {
	*x = FooVAddRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVAddRequest) ProtoMessage() {}

func (x *FooVAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVAddRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooVAddRequest) GetVDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VDouble
	}
	return 0
}

func (x *FooVAddRequest) GetVInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VInt64
	}
	return 0
}

func (x *FooVAddRequest) GetVUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VUint64
	}
	return 0
}

func (x *FooVAddRequest) GetVBool() bool {
	if x != nil {
		return x.xxx_hidden_VBool
	}
	return false
}

func (x *FooVAddRequest) GetVString() string {
	if x != nil {
		return x.xxx_hidden_VString
	}
	return ""
}

func (x *FooVAddRequest) GetVBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VBytes
	}
	return nil
}

func (x *FooVAddRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooVAddRequest) SetVDouble(v float64) {
	x.xxx_hidden_VDouble = v
}

func (x *FooVAddRequest) SetVInt64(v int64) {
	x.xxx_hidden_VInt64 = v
}

func (x *FooVAddRequest) SetVUint64(v uint64) {
	x.xxx_hidden_VUint64 = v
}

func (x *FooVAddRequest) SetVBool(v bool) {
	x.xxx_hidden_VBool = v
}

func (x *FooVAddRequest) SetVString(v string) {
	x.xxx_hidden_VString = v
}

func (x *FooVAddRequest) SetVBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VBytes = v
}

type FooVAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id      int64
	VDouble float64
	VInt64  int64
	VUint64 uint64
	VBool   bool
	VString string
	VBytes  []byte
}

func (b0 FooVAddRequest_builder) Build() *FooVAddRequest {
	m0 := &FooVAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_VDouble = b.VDouble
	x.xxx_hidden_VInt64 = b.VInt64
	x.xxx_hidden_VUint64 = b.VUint64
	x.xxx_hidden_VBool = b.VBool
	x.xxx_hidden_VString = b.VString
	x.xxx_hidden_VBytes = b.VBytes
	return m0
}

type FooVGetRequest struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isFooVGetRequest_Key   `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FooVGetRequest) Reset() {
	*x = FooVGetRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVGetRequest) ProtoMessage() {}

func (x *FooVGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVGetRequest) GetId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*fooVGetRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *FooVGetRequest) SetId(v int64) {
	x.xxx_hidden_Key = &fooVGetRequest_Id{v}
}

func (x *FooVGetRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooVGetRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*fooVGetRequest_Id)
	return ok
}

func (x *FooVGetRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooVGetRequest) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*fooVGetRequest_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const FooVGetRequest_Key_not_set_case case_FooVGetRequest_Key = 0
const FooVGetRequest_Id_case case_FooVGetRequest_Key = 1

func (x *FooVGetRequest) WhichKey() case_FooVGetRequest_Key {
	if x == nil {
		return FooVGetRequest_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *fooVGetRequest_Id:
		return FooVGetRequest_Id_case
	default:
		return FooVGetRequest_Key_not_set_case
	}
}

type FooVGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id *int64
	// -- end of xxx_hidden_Key
}

func (b0 FooVGetRequest_builder) Build() *FooVGetRequest {
	m0 := &FooVGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &fooVGetRequest_Id{*b.Id}
	}
	return m0
}

type case_FooVGetRequest_Key protoreflect.FieldNumber

func (x case_FooVGetRequest_Key) String() string {
	md := file_example_library_foo_g_proto_msgTypes[16].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFooVGetRequest_Key interface {
	isFooVGetRequest_Key()
}

type fooVGetRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*fooVGetRequest_Id) isFooVGetRequest_Key() {}

type FooVPatchRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key         *FooVGetRequest        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_VDouble     float64                `protobuf:"fixed64,21,opt,name=v_double,json=vDouble,proto3,oneof" json:"v_double,omitempty"`
	xxx_hidden_VInt64      int64                  `protobuf:"varint,23,opt,name=v_int64,json=vInt64,proto3,oneof" json:"v_int64,omitempty"`
	xxx_hidden_VUint64     uint64                 `protobuf:"varint,25,opt,name=v_uint64,json=vUint64,proto3,oneof" json:"v_uint64,omitempty"`
	xxx_hidden_VBool       bool                   `protobuf:"varint,27,opt,name=v_bool,json=vBool,proto3,oneof" json:"v_bool,omitempty"`
	xxx_hidden_VString     *string                `protobuf:"bytes,29,opt,name=v_string,json=vString,proto3,oneof" json:"v_string,omitempty"`
	xxx_hidden_VBytes      []byte                 `protobuf:"bytes,31,opt,name=v_bytes,json=vBytes,proto3,oneof" json:"v_bytes,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FooVPatchRequest) Reset() {
	*x = FooVPatchRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVPatchRequest) ProtoMessage() {}

func (x *FooVPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVPatchRequest) GetKey() *FooVGetRequest {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *FooVPatchRequest) GetVDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VDouble
	}
	return 0
}

func (x *FooVPatchRequest) GetVInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VInt64
	}
	return 0
}

func (x *FooVPatchRequest) GetVUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VUint64
	}
	return 0
}

func (x *FooVPatchRequest) GetVBool() bool {
	if x != nil {
		return x.xxx_hidden_VBool
	}
	return false
}

func (x *FooVPatchRequest) GetVString() string {
	if x != nil {
		if x.xxx_hidden_VString != nil {
			return *x.xxx_hidden_VString
		}
		return ""
	}
	return ""
}

func (x *FooVPatchRequest) GetVBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VBytes
	}
	return nil
}

func (x *FooVPatchRequest) SetKey(v *FooVGetRequest) {
	x.xxx_hidden_Key = v
}

func (x *FooVPatchRequest) SetVDouble(v float64) {
	x.xxx_hidden_VDouble = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *FooVPatchRequest) SetVInt64(v int64) {
	x.xxx_hidden_VInt64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *FooVPatchRequest) SetVUint64(v uint64) {
	x.xxx_hidden_VUint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *FooVPatchRequest) SetVBool(v bool) {
	x.xxx_hidden_VBool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *FooVPatchRequest) SetVString(v string) {
	x.xxx_hidden_VString = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *FooVPatchRequest) SetVBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *FooVPatchRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooVPatchRequest) HasVDouble() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FooVPatchRequest) HasVInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FooVPatchRequest) HasVUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FooVPatchRequest) HasVBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FooVPatchRequest) HasVString() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FooVPatchRequest) HasVBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *FooVPatchRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooVPatchRequest) ClearVDouble() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_VDouble = 0
}

func (x *FooVPatchRequest) ClearVInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_VInt64 = 0
}

func (x *FooVPatchRequest) ClearVUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_VUint64 = 0
}

func (x *FooVPatchRequest) ClearVBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_VBool = false
}

func (x *FooVPatchRequest) ClearVString() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_VString = nil
}

func (x *FooVPatchRequest) ClearVBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_VBytes = nil
}

type FooVPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key     *FooVGetRequest
	VDouble *float64
	VInt64  *int64
	VUint64 *uint64
	VBool   *bool
	VString *string
	VBytes  []byte
}

func (b0 FooVPatchRequest_builder) Build() *FooVPatchRequest {
	m0 := &FooVPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	if b.VDouble != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_VDouble = *b.VDouble
	}
	if b.VInt64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_VInt64 = *b.VInt64
	}
	if b.VUint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_VUint64 = *b.VUint64
	}
	if b.VBool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_VBool = *b.VBool
	}
	if b.VString != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_VString = b.VString
	}
	if b.VBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_VBytes = b.VBytes
	}
	return m0
}

type FooVdAddRequest struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id       int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_VdDouble float64                `protobuf:"fixed64,11,opt,name=vd_double,json=vdDouble,proto3" json:"vd_double,omitempty"`
	xxx_hidden_VdInt64  int64                  `protobuf:"varint,12,opt,name=vd_int64,json=vdInt64,proto3" json:"vd_int64,omitempty"`
	xxx_hidden_VdUint64 uint64                 `protobuf:"varint,13,opt,name=vd_uint64,json=vdUint64,proto3" json:"vd_uint64,omitempty"`
	xxx_hidden_VdBool   bool                   `protobuf:"varint,14,opt,name=vd_bool,json=vdBool,proto3" json:"vd_bool,omitempty"`
	xxx_hidden_VdString string                 `protobuf:"bytes,15,opt,name=vd_string,json=vdString,proto3" json:"vd_string,omitempty"`
	xxx_hidden_VdBytes  []byte                 `protobuf:"bytes,16,opt,name=vd_bytes,json=vdBytes,proto3" json:"vd_bytes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FooVdAddRequest) Reset() {
	*x = FooVdAddRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVdAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVdAddRequest) ProtoMessage() {}

func (x *FooVdAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVdAddRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooVdAddRequest) GetVdDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VdDouble
	}
	return 0
}

func (x *FooVdAddRequest) GetVdInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VdInt64
	}
	return 0
}

func (x *FooVdAddRequest) GetVdUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VdUint64
	}
	return 0
}

func (x *FooVdAddRequest) GetVdBool() bool {
	if x != nil {
		return x.xxx_hidden_VdBool
	}
	return false
}

func (x *FooVdAddRequest) GetVdString() string {
	if x != nil {
		return x.xxx_hidden_VdString
	}
	return ""
}

func (x *FooVdAddRequest) GetVdBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VdBytes
	}
	return nil
}

func (x *FooVdAddRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooVdAddRequest) SetVdDouble(v float64) {
	x.xxx_hidden_VdDouble = v
}

func (x *FooVdAddRequest) SetVdInt64(v int64) {
	x.xxx_hidden_VdInt64 = v
}

func (x *FooVdAddRequest) SetVdUint64(v uint64) {
	x.xxx_hidden_VdUint64 = v
}

func (x *FooVdAddRequest) SetVdBool(v bool) {
	x.xxx_hidden_VdBool = v
}

func (x *FooVdAddRequest) SetVdString(v string) {
	x.xxx_hidden_VdString = v
}

func (x *FooVdAddRequest) SetVdBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VdBytes = v
}

type FooVdAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       int64
	VdDouble float64
	VdInt64  int64
	VdUint64 uint64
	VdBool   bool
	VdString string
	VdBytes  []byte
}

func (b0 FooVdAddRequest_builder) Build() *FooVdAddRequest {
	m0 := &FooVdAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_VdDouble = b.VdDouble
	x.xxx_hidden_VdInt64 = b.VdInt64
	x.xxx_hidden_VdUint64 = b.VdUint64
	x.xxx_hidden_VdBool = b.VdBool
	x.xxx_hidden_VdString = b.VdString
	x.xxx_hidden_VdBytes = b.VdBytes
	return m0
}

type FooVdGetRequest struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isFooVdGetRequest_Key  `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FooVdGetRequest) Reset() {
	*x = FooVdGetRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVdGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVdGetRequest) ProtoMessage() {}

func (x *FooVdGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVdGetRequest) GetId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*fooVdGetRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *FooVdGetRequest) SetId(v int64) {
	x.xxx_hidden_Key = &fooVdGetRequest_Id{v}
}

func (x *FooVdGetRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooVdGetRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*fooVdGetRequest_Id)
	return ok
}

func (x *FooVdGetRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooVdGetRequest) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*fooVdGetRequest_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const FooVdGetRequest_Key_not_set_case case_FooVdGetRequest_Key = 0
const FooVdGetRequest_Id_case case_FooVdGetRequest_Key = 1

func (x *FooVdGetRequest) WhichKey() case_FooVdGetRequest_Key {
	if x == nil {
		return FooVdGetRequest_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *fooVdGetRequest_Id:
		return FooVdGetRequest_Id_case
	default:
		return FooVdGetRequest_Key_not_set_case
	}
}

type FooVdGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id *int64
	// -- end of xxx_hidden_Key
}

func (b0 FooVdGetRequest_builder) Build() *FooVdGetRequest {
	m0 := &FooVdGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &fooVdGetRequest_Id{*b.Id}
	}
	return m0
}

type case_FooVdGetRequest_Key protoreflect.FieldNumber

func (x case_FooVdGetRequest_Key) String() string {
	md := file_example_library_foo_g_proto_msgTypes[19].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFooVdGetRequest_Key interface {
	isFooVdGetRequest_Key()
}

type fooVdGetRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*fooVdGetRequest_Id) isFooVdGetRequest_Key() {}

type FooVdPatchRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key         *FooVdGetRequest       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_VdDouble    float64                `protobuf:"fixed64,21,opt,name=vd_double,json=vdDouble,proto3,oneof" json:"vd_double,omitempty"`
	xxx_hidden_VdInt64     int64                  `protobuf:"varint,23,opt,name=vd_int64,json=vdInt64,proto3,oneof" json:"vd_int64,omitempty"`
	xxx_hidden_VdUint64    uint64                 `protobuf:"varint,25,opt,name=vd_uint64,json=vdUint64,proto3,oneof" json:"vd_uint64,omitempty"`
	xxx_hidden_VdBool      bool                   `protobuf:"varint,27,opt,name=vd_bool,json=vdBool,proto3,oneof" json:"vd_bool,omitempty"`
	xxx_hidden_VdString    *string                `protobuf:"bytes,29,opt,name=vd_string,json=vdString,proto3,oneof" json:"vd_string,omitempty"`
	xxx_hidden_VdBytes     []byte                 `protobuf:"bytes,31,opt,name=vd_bytes,json=vdBytes,proto3,oneof" json:"vd_bytes,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FooVdPatchRequest) Reset() {
	*x = FooVdPatchRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVdPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVdPatchRequest) ProtoMessage() {}

func (x *FooVdPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVdPatchRequest) GetKey() *FooVdGetRequest {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *FooVdPatchRequest) GetVdDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VdDouble
	}
	return 0
}

func (x *FooVdPatchRequest) GetVdInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VdInt64
	}
	return 0
}

func (x *FooVdPatchRequest) GetVdUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VdUint64
	}
	return 0
}

func (x *FooVdPatchRequest) GetVdBool() bool {
	if x != nil {
		return x.xxx_hidden_VdBool
	}
	return false
}

func (x *FooVdPatchRequest) GetVdString() string {
	if x != nil {
		if x.xxx_hidden_VdString != nil {
			return *x.xxx_hidden_VdString
		}
		return ""
	}
	return ""
}

func (x *FooVdPatchRequest) GetVdBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VdBytes
	}
	return nil
}

func (x *FooVdPatchRequest) SetKey(v *FooVdGetRequest) {
	x.xxx_hidden_Key = v
}

func (x *FooVdPatchRequest) SetVdDouble(v float64) {
	x.xxx_hidden_VdDouble = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *FooVdPatchRequest) SetVdInt64(v int64) {
	x.xxx_hidden_VdInt64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *FooVdPatchRequest) SetVdUint64(v uint64) {
	x.xxx_hidden_VdUint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *FooVdPatchRequest) SetVdBool(v bool) {
	x.xxx_hidden_VdBool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *FooVdPatchRequest) SetVdString(v string) {
	x.xxx_hidden_VdString = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *FooVdPatchRequest) SetVdBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VdBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *FooVdPatchRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooVdPatchRequest) HasVdDouble() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FooVdPatchRequest) HasVdInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FooVdPatchRequest) HasVdUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FooVdPatchRequest) HasVdBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FooVdPatchRequest) HasVdString() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FooVdPatchRequest) HasVdBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *FooVdPatchRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooVdPatchRequest) ClearVdDouble() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_VdDouble = 0
}

func (x *FooVdPatchRequest) ClearVdInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_VdInt64 = 0
}

func (x *FooVdPatchRequest) ClearVdUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_VdUint64 = 0
}

func (x *FooVdPatchRequest) ClearVdBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_VdBool = false
}

func (x *FooVdPatchRequest) ClearVdString() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_VdString = nil
}

func (x *FooVdPatchRequest) ClearVdBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_VdBytes = nil
}

type FooVdPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key      *FooVdGetRequest
	VdDouble *float64
	VdInt64  *int64
	VdUint64 *uint64
	VdBool   *bool
	VdString *string
	VdBytes  []byte
}

func (b0 FooVdPatchRequest_builder) Build() *FooVdPatchRequest {
	m0 := &FooVdPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	if b.VdDouble != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_VdDouble = *b.VdDouble
	}
	if b.VdInt64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_VdInt64 = *b.VdInt64
	}
	if b.VdUint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_VdUint64 = *b.VdUint64
	}
	if b.VdBool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_VdBool = *b.VdBool
	}
	if b.VdString != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_VdString = b.VdString
	}
	if b.VdBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_VdBytes = b.VdBytes
	}
	return m0
}

type FooVoAddRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_VoDouble    float64                `protobuf:"fixed64,11,opt,name=vo_double,json=voDouble,proto3,oneof" json:"vo_double,omitempty"`
	xxx_hidden_VoInt64     int64                  `protobuf:"varint,12,opt,name=vo_int64,json=voInt64,proto3,oneof" json:"vo_int64,omitempty"`
	xxx_hidden_VoUint64    uint64                 `protobuf:"varint,13,opt,name=vo_uint64,json=voUint64,proto3,oneof" json:"vo_uint64,omitempty"`
	xxx_hidden_VoBool      bool                   `protobuf:"varint,14,opt,name=vo_bool,json=voBool,proto3,oneof" json:"vo_bool,omitempty"`
	xxx_hidden_VoString    *string                `protobuf:"bytes,15,opt,name=vo_string,json=voString,proto3,oneof" json:"vo_string,omitempty"`
	xxx_hidden_VoBytes     []byte                 `protobuf:"bytes,16,opt,name=vo_bytes,json=voBytes,proto3,oneof" json:"vo_bytes,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FooVoAddRequest) Reset() {
	*x = FooVoAddRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVoAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVoAddRequest) ProtoMessage() {}

func (x *FooVoAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVoAddRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooVoAddRequest) GetVoDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VoDouble
	}
	return 0
}

func (x *FooVoAddRequest) GetVoInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VoInt64
	}
	return 0
}

func (x *FooVoAddRequest) GetVoUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VoUint64
	}
	return 0
}

func (x *FooVoAddRequest) GetVoBool() bool {
	if x != nil {
		return x.xxx_hidden_VoBool
	}
	return false
}

func (x *FooVoAddRequest) GetVoString() string {
	if x != nil {
		if x.xxx_hidden_VoString != nil {
			return *x.xxx_hidden_VoString
		}
		return ""
	}
	return ""
}

func (x *FooVoAddRequest) GetVoBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VoBytes
	}
	return nil
}

func (x *FooVoAddRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooVoAddRequest) SetVoDouble(v float64) {
	x.xxx_hidden_VoDouble = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *FooVoAddRequest) SetVoInt64(v int64) {
	x.xxx_hidden_VoInt64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *FooVoAddRequest) SetVoUint64(v uint64) {
	x.xxx_hidden_VoUint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *FooVoAddRequest) SetVoBool(v bool) {
	x.xxx_hidden_VoBool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *FooVoAddRequest) SetVoString(v string) {
	x.xxx_hidden_VoString = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *FooVoAddRequest) SetVoBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VoBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *FooVoAddRequest) HasVoDouble() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FooVoAddRequest) HasVoInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FooVoAddRequest) HasVoUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FooVoAddRequest) HasVoBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FooVoAddRequest) HasVoString() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FooVoAddRequest) HasVoBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *FooVoAddRequest) ClearVoDouble() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_VoDouble = 0
}

func (x *FooVoAddRequest) ClearVoInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_VoInt64 = 0
}

func (x *FooVoAddRequest) ClearVoUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_VoUint64 = 0
}

func (x *FooVoAddRequest) ClearVoBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_VoBool = false
}

func (x *FooVoAddRequest) ClearVoString() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_VoString = nil
}

func (x *FooVoAddRequest) ClearVoBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_VoBytes = nil
}

type FooVoAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       int64
	VoDouble *float64
	VoInt64  *int64
	VoUint64 *uint64
	VoBool   *bool
	VoString *string
	VoBytes  []byte
}

func (b0 FooVoAddRequest_builder) Build() *FooVoAddRequest {
	m0 := &FooVoAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	if b.VoDouble != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_VoDouble = *b.VoDouble
	}
	if b.VoInt64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_VoInt64 = *b.VoInt64
	}
	if b.VoUint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_VoUint64 = *b.VoUint64
	}
	if b.VoBool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_VoBool = *b.VoBool
	}
	if b.VoString != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_VoString = b.VoString
	}
	if b.VoBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_VoBytes = b.VoBytes
	}
	return m0
}

type FooVoGetRequest struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isFooVoGetRequest_Key  `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FooVoGetRequest) Reset() {
	*x = FooVoGetRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVoGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVoGetRequest) ProtoMessage() {}

func (x *FooVoGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVoGetRequest) GetId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*fooVoGetRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *FooVoGetRequest) SetId(v int64) {
	x.xxx_hidden_Key = &fooVoGetRequest_Id{v}
}

func (x *FooVoGetRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooVoGetRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*fooVoGetRequest_Id)
	return ok
}

func (x *FooVoGetRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooVoGetRequest) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*fooVoGetRequest_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const FooVoGetRequest_Key_not_set_case case_FooVoGetRequest_Key = 0
const FooVoGetRequest_Id_case case_FooVoGetRequest_Key = 1

func (x *FooVoGetRequest) WhichKey() case_FooVoGetRequest_Key {
	if x == nil {
		return FooVoGetRequest_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *fooVoGetRequest_Id:
		return FooVoGetRequest_Id_case
	default:
		return FooVoGetRequest_Key_not_set_case
	}
}

type FooVoGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id *int64
	// -- end of xxx_hidden_Key
}

func (b0 FooVoGetRequest_builder) Build() *FooVoGetRequest {
	m0 := &FooVoGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &fooVoGetRequest_Id{*b.Id}
	}
	return m0
}

type case_FooVoGetRequest_Key protoreflect.FieldNumber

func (x case_FooVoGetRequest_Key) String() string {
	md := file_example_library_foo_g_proto_msgTypes[22].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFooVoGetRequest_Key interface {
	isFooVoGetRequest_Key()
}

type fooVoGetRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*fooVoGetRequest_Id) isFooVoGetRequest_Key() {}

type FooVoPatchRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key         *FooVoGetRequest       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_VoDouble    float64                `protobuf:"fixed64,21,opt,name=vo_double,json=voDouble,proto3,oneof" json:"vo_double,omitempty"`
	xxx_hidden_VoInt64     int64                  `protobuf:"varint,23,opt,name=vo_int64,json=voInt64,proto3,oneof" json:"vo_int64,omitempty"`
	xxx_hidden_VoUint64    uint64                 `protobuf:"varint,25,opt,name=vo_uint64,json=voUint64,proto3,oneof" json:"vo_uint64,omitempty"`
	xxx_hidden_VoBool      bool                   `protobuf:"varint,27,opt,name=vo_bool,json=voBool,proto3,oneof" json:"vo_bool,omitempty"`
	xxx_hidden_VoString    *string                `protobuf:"bytes,29,opt,name=vo_string,json=voString,proto3,oneof" json:"vo_string,omitempty"`
	xxx_hidden_VoBytes     []byte                 `protobuf:"bytes,31,opt,name=vo_bytes,json=voBytes,proto3,oneof" json:"vo_bytes,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FooVoPatchRequest) Reset() {
	*x = FooVoPatchRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVoPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVoPatchRequest) ProtoMessage() {}

func (x *FooVoPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVoPatchRequest) GetKey() *FooVoGetRequest {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *FooVoPatchRequest) GetVoDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VoDouble
	}
	return 0
}

func (x *FooVoPatchRequest) GetVoInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VoInt64
	}
	return 0
}

func (x *FooVoPatchRequest) GetVoUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VoUint64
	}
	return 0
}

func (x *FooVoPatchRequest) GetVoBool() bool {
	if x != nil {
		return x.xxx_hidden_VoBool
	}
	return false
}

func (x *FooVoPatchRequest) GetVoString() string {
	if x != nil {
		if x.xxx_hidden_VoString != nil {
			return *x.xxx_hidden_VoString
		}
		return ""
	}
	return ""
}

func (x *FooVoPatchRequest) GetVoBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VoBytes
	}
	return nil
}

func (x *FooVoPatchRequest) SetKey(v *FooVoGetRequest) {
	x.xxx_hidden_Key = v
}

func (x *FooVoPatchRequest) SetVoDouble(v float64) {
	x.xxx_hidden_VoDouble = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *FooVoPatchRequest) SetVoInt64(v int64) {
	x.xxx_hidden_VoInt64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *FooVoPatchRequest) SetVoUint64(v uint64) {
	x.xxx_hidden_VoUint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *FooVoPatchRequest) SetVoBool(v bool) {
	x.xxx_hidden_VoBool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *FooVoPatchRequest) SetVoString(v string) {
	x.xxx_hidden_VoString = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *FooVoPatchRequest) SetVoBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VoBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *FooVoPatchRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooVoPatchRequest) HasVoDouble() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FooVoPatchRequest) HasVoInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FooVoPatchRequest) HasVoUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FooVoPatchRequest) HasVoBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FooVoPatchRequest) HasVoString() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FooVoPatchRequest) HasVoBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *FooVoPatchRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooVoPatchRequest) ClearVoDouble() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_VoDouble = 0
}

func (x *FooVoPatchRequest) ClearVoInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_VoInt64 = 0
}

func (x *FooVoPatchRequest) ClearVoUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_VoUint64 = 0
}

func (x *FooVoPatchRequest) ClearVoBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_VoBool = false
}

func (x *FooVoPatchRequest) ClearVoString() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_VoString = nil
}

func (x *FooVoPatchRequest) ClearVoBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_VoBytes = nil
}

type FooVoPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key      *FooVoGetRequest
	VoDouble *float64
	VoInt64  *int64
	VoUint64 *uint64
	VoBool   *bool
	VoString *string
	VoBytes  []byte
}

func (b0 FooVoPatchRequest_builder) Build() *FooVoPatchRequest {
	m0 := &FooVoPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	if b.VoDouble != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_VoDouble = *b.VoDouble
	}
	if b.VoInt64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_VoInt64 = *b.VoInt64
	}
	if b.VoUint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_VoUint64 = *b.VoUint64
	}
	if b.VoBool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_VoBool = *b.VoBool
	}
	if b.VoString != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_VoString = b.VoString
	}
	if b.VoBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_VoBytes = b.VoBytes
	}
	return m0
}

type FooVonAddRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_VonDouble   float64                `protobuf:"fixed64,11,opt,name=von_double,json=vonDouble,proto3,oneof" json:"von_double,omitempty"`
	xxx_hidden_VonInt64    int64                  `protobuf:"varint,12,opt,name=von_int64,json=vonInt64,proto3,oneof" json:"von_int64,omitempty"`
	xxx_hidden_VonUint64   uint64                 `protobuf:"varint,13,opt,name=von_uint64,json=vonUint64,proto3,oneof" json:"von_uint64,omitempty"`
	xxx_hidden_VonBool     bool                   `protobuf:"varint,14,opt,name=von_bool,json=vonBool,proto3,oneof" json:"von_bool,omitempty"`
	xxx_hidden_VonString   *string                `protobuf:"bytes,15,opt,name=von_string,json=vonString,proto3,oneof" json:"von_string,omitempty"`
	xxx_hidden_VonBytes    []byte                 `protobuf:"bytes,16,opt,name=von_bytes,json=vonBytes,proto3,oneof" json:"von_bytes,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FooVonAddRequest) Reset() {
	*x = FooVonAddRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVonAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVonAddRequest) ProtoMessage() {}

func (x *FooVonAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVonAddRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooVonAddRequest) GetVonDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VonDouble
	}
	return 0
}

func (x *FooVonAddRequest) GetVonInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VonInt64
	}
	return 0
}

func (x *FooVonAddRequest) GetVonUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VonUint64
	}
	return 0
}

func (x *FooVonAddRequest) GetVonBool() bool {
	if x != nil {
		return x.xxx_hidden_VonBool
	}
	return false
}

func (x *FooVonAddRequest) GetVonString() string {
	if x != nil {
		if x.xxx_hidden_VonString != nil {
			return *x.xxx_hidden_VonString
		}
		return ""
	}
	return ""
}

func (x *FooVonAddRequest) GetVonBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VonBytes
	}
	return nil
}

func (x *FooVonAddRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooVonAddRequest) SetVonDouble(v float64) {
	x.xxx_hidden_VonDouble = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *FooVonAddRequest) SetVonInt64(v int64) {
	x.xxx_hidden_VonInt64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *FooVonAddRequest) SetVonUint64(v uint64) {
	x.xxx_hidden_VonUint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *FooVonAddRequest) SetVonBool(v bool) {
	x.xxx_hidden_VonBool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *FooVonAddRequest) SetVonString(v string) {
	x.xxx_hidden_VonString = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *FooVonAddRequest) SetVonBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VonBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *FooVonAddRequest) HasVonDouble() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FooVonAddRequest) HasVonInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FooVonAddRequest) HasVonUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FooVonAddRequest) HasVonBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FooVonAddRequest) HasVonString() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FooVonAddRequest) HasVonBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *FooVonAddRequest) ClearVonDouble() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_VonDouble = 0
}

func (x *FooVonAddRequest) ClearVonInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_VonInt64 = 0
}

func (x *FooVonAddRequest) ClearVonUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_VonUint64 = 0
}

func (x *FooVonAddRequest) ClearVonBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_VonBool = false
}

func (x *FooVonAddRequest) ClearVonString() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_VonString = nil
}

func (x *FooVonAddRequest) ClearVonBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_VonBytes = nil
}

type FooVonAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        int64
	VonDouble *float64
	VonInt64  *int64
	VonUint64 *uint64
	VonBool   *bool
	VonString *string
	VonBytes  []byte
}

func (b0 FooVonAddRequest_builder) Build() *FooVonAddRequest {
	m0 := &FooVonAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	if b.VonDouble != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_VonDouble = *b.VonDouble
	}
	if b.VonInt64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_VonInt64 = *b.VonInt64
	}
	if b.VonUint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_VonUint64 = *b.VonUint64
	}
	if b.VonBool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_VonBool = *b.VonBool
	}
	if b.VonString != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_VonString = b.VonString
	}
	if b.VonBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_VonBytes = b.VonBytes
	}
	return m0
}

type FooVonGetRequest struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isFooVonGetRequest_Key `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FooVonGetRequest) Reset() {
	*x = FooVonGetRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVonGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVonGetRequest) ProtoMessage() {}

func (x *FooVonGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVonGetRequest) GetId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*fooVonGetRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *FooVonGetRequest) SetId(v int64) {
	x.xxx_hidden_Key = &fooVonGetRequest_Id{v}
}

func (x *FooVonGetRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooVonGetRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*fooVonGetRequest_Id)
	return ok
}

func (x *FooVonGetRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooVonGetRequest) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*fooVonGetRequest_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const FooVonGetRequest_Key_not_set_case case_FooVonGetRequest_Key = 0
const FooVonGetRequest_Id_case case_FooVonGetRequest_Key = 1

func (x *FooVonGetRequest) WhichKey() case_FooVonGetRequest_Key {
	if x == nil {
		return FooVonGetRequest_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *fooVonGetRequest_Id:
		return FooVonGetRequest_Id_case
	default:
		return FooVonGetRequest_Key_not_set_case
	}
}

type FooVonGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id *int64
	// -- end of xxx_hidden_Key
}

func (b0 FooVonGetRequest_builder) Build() *FooVonGetRequest {
	m0 := &FooVonGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &fooVonGetRequest_Id{*b.Id}
	}
	return m0
}

type case_FooVonGetRequest_Key protoreflect.FieldNumber

func (x case_FooVonGetRequest_Key) String() string {
	md := file_example_library_foo_g_proto_msgTypes[25].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFooVonGetRequest_Key interface {
	isFooVonGetRequest_Key()
}

type fooVonGetRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*fooVonGetRequest_Id) isFooVonGetRequest_Key() {}

type FooVonPatchRequest struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key           *FooVonGetRequest      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_VonDouble     float64                `protobuf:"fixed64,21,opt,name=von_double,json=vonDouble,proto3,oneof" json:"von_double,omitempty"`
	xxx_hidden_VonDoubleNull bool                   `protobuf:"varint,22,opt,name=von_double_null,json=vonDoubleNull,proto3" json:"von_double_null,omitempty"`
	xxx_hidden_VonInt64      int64                  `protobuf:"varint,23,opt,name=von_int64,json=vonInt64,proto3,oneof" json:"von_int64,omitempty"`
	xxx_hidden_VonInt64Null  bool                   `protobuf:"varint,24,opt,name=von_int64_null,json=vonInt64Null,proto3" json:"von_int64_null,omitempty"`
	xxx_hidden_VonUint64     uint64                 `protobuf:"varint,25,opt,name=von_uint64,json=vonUint64,proto3,oneof" json:"von_uint64,omitempty"`
	xxx_hidden_VonUint64Null bool                   `protobuf:"varint,26,opt,name=von_uint64_null,json=vonUint64Null,proto3" json:"von_uint64_null,omitempty"`
	xxx_hidden_VonBool       bool                   `protobuf:"varint,27,opt,name=von_bool,json=vonBool,proto3,oneof" json:"von_bool,omitempty"`
	xxx_hidden_VonBoolNull   bool                   `protobuf:"varint,28,opt,name=von_bool_null,json=vonBoolNull,proto3" json:"von_bool_null,omitempty"`
	xxx_hidden_VonString     *string                `protobuf:"bytes,29,opt,name=von_string,json=vonString,proto3,oneof" json:"von_string,omitempty"`
	xxx_hidden_VonStringNull bool                   `protobuf:"varint,30,opt,name=von_string_null,json=vonStringNull,proto3" json:"von_string_null,omitempty"`
	xxx_hidden_VonBytes      []byte                 `protobuf:"bytes,31,opt,name=von_bytes,json=vonBytes,proto3,oneof" json:"von_bytes,omitempty"`
	xxx_hidden_VonBytesNull  bool                   `protobuf:"varint,32,opt,name=von_bytes_null,json=vonBytesNull,proto3" json:"von_bytes_null,omitempty"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *FooVonPatchRequest) Reset() {
	*x = FooVonPatchRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVonPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVonPatchRequest) ProtoMessage() {}

func (x *FooVonPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVonPatchRequest) GetKey() *FooVonGetRequest {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *FooVonPatchRequest) GetVonDouble() float64 {
	if x != nil {
		return x.xxx_hidden_VonDouble
	}
	return 0
}

func (x *FooVonPatchRequest) GetVonDoubleNull() bool {
	if x != nil {
		return x.xxx_hidden_VonDoubleNull
	}
	return false
}

func (x *FooVonPatchRequest) GetVonInt64() int64 {
	if x != nil {
		return x.xxx_hidden_VonInt64
	}
	return 0
}

func (x *FooVonPatchRequest) GetVonInt64Null() bool {
	if x != nil {
		return x.xxx_hidden_VonInt64Null
	}
	return false
}

func (x *FooVonPatchRequest) GetVonUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_VonUint64
	}
	return 0
}

func (x *FooVonPatchRequest) GetVonUint64Null() bool {
	if x != nil {
		return x.xxx_hidden_VonUint64Null
	}
	return false
}

func (x *FooVonPatchRequest) GetVonBool() bool {
	if x != nil {
		return x.xxx_hidden_VonBool
	}
	return false
}

func (x *FooVonPatchRequest) GetVonBoolNull() bool {
	if x != nil {
		return x.xxx_hidden_VonBoolNull
	}
	return false
}

func (x *FooVonPatchRequest) GetVonString() string {
	if x != nil {
		if x.xxx_hidden_VonString != nil {
			return *x.xxx_hidden_VonString
		}
		return ""
	}
	return ""
}

func (x *FooVonPatchRequest) GetVonStringNull() bool {
	if x != nil {
		return x.xxx_hidden_VonStringNull
	}
	return false
}

func (x *FooVonPatchRequest) GetVonBytes() []byte {
	if x != nil {
		return x.xxx_hidden_VonBytes
	}
	return nil
}

func (x *FooVonPatchRequest) GetVonBytesNull() bool {
	if x != nil {
		return x.xxx_hidden_VonBytesNull
	}
	return false
}

func (x *FooVonPatchRequest) SetKey(v *FooVonGetRequest) {
	x.xxx_hidden_Key = v
}

func (x *FooVonPatchRequest) SetVonDouble(v float64) {
	x.xxx_hidden_VonDouble = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 13)
}

func (x *FooVonPatchRequest) SetVonDoubleNull(v bool) {
	x.xxx_hidden_VonDoubleNull = v
}

func (x *FooVonPatchRequest) SetVonInt64(v int64) {
	x.xxx_hidden_VonInt64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 13)
}

func (x *FooVonPatchRequest) SetVonInt64Null(v bool) {
	x.xxx_hidden_VonInt64Null = v
}

func (x *FooVonPatchRequest) SetVonUint64(v uint64) {
	x.xxx_hidden_VonUint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 13)
}

func (x *FooVonPatchRequest) SetVonUint64Null(v bool) {
	x.xxx_hidden_VonUint64Null = v
}

func (x *FooVonPatchRequest) SetVonBool(v bool) {
	x.xxx_hidden_VonBool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 13)
}

func (x *FooVonPatchRequest) SetVonBoolNull(v bool) {
	x.xxx_hidden_VonBoolNull = v
}

func (x *FooVonPatchRequest) SetVonString(v string) {
	x.xxx_hidden_VonString = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 13)
}

func (x *FooVonPatchRequest) SetVonStringNull(v bool) {
	x.xxx_hidden_VonStringNull = v
}

func (x *FooVonPatchRequest) SetVonBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_VonBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 13)
}

func (x *FooVonPatchRequest) SetVonBytesNull(v bool) {
	x.xxx_hidden_VonBytesNull = v
}

func (x *FooVonPatchRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooVonPatchRequest) HasVonDouble() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FooVonPatchRequest) HasVonInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FooVonPatchRequest) HasVonUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FooVonPatchRequest) HasVonBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *FooVonPatchRequest) HasVonString() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *FooVonPatchRequest) HasVonBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *FooVonPatchRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooVonPatchRequest) ClearVonDouble() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_VonDouble = 0
}

func (x *FooVonPatchRequest) ClearVonInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_VonInt64 = 0
}

func (x *FooVonPatchRequest) ClearVonUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_VonUint64 = 0
}

func (x *FooVonPatchRequest) ClearVonBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_VonBool = false
}

func (x *FooVonPatchRequest) ClearVonString() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_VonString = nil
}

func (x *FooVonPatchRequest) ClearVonBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_VonBytes = nil
}

type FooVonPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key           *FooVonGetRequest
	VonDouble     *float64
	VonDoubleNull bool
	VonInt64      *int64
	VonInt64Null  bool
	VonUint64     *uint64
	VonUint64Null bool
	VonBool       *bool
	VonBoolNull   bool
	VonString     *string
	VonStringNull bool
	VonBytes      []byte
	VonBytesNull  bool
}

func (b0 FooVonPatchRequest_builder) Build() *FooVonPatchRequest {
	m0 := &FooVonPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	if b.VonDouble != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 13)
		x.xxx_hidden_VonDouble = *b.VonDouble
	}
	x.xxx_hidden_VonDoubleNull = b.VonDoubleNull
	if b.VonInt64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 13)
		x.xxx_hidden_VonInt64 = *b.VonInt64
	}
	x.xxx_hidden_VonInt64Null = b.VonInt64Null
	if b.VonUint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 13)
		x.xxx_hidden_VonUint64 = *b.VonUint64
	}
	x.xxx_hidden_VonUint64Null = b.VonUint64Null
	if b.VonBool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 13)
		x.xxx_hidden_VonBool = *b.VonBool
	}
	x.xxx_hidden_VonBoolNull = b.VonBoolNull
	if b.VonString != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 13)
		x.xxx_hidden_VonString = b.VonString
	}
	x.xxx_hidden_VonStringNull = b.VonStringNull
	if b.VonBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 13)
		x.xxx_hidden_VonBytes = b.VonBytes
	}
	x.xxx_hidden_VonBytesNull = b.VonBytesNull
	return m0
}

type FooVrAddRequest struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id       int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_VrDouble []float64              `protobuf:"fixed64,11,rep,packed,name=vr_double,json=vrDouble,proto3" json:"vr_double,omitempty"`
	xxx_hidden_VrInt64  []int64                `protobuf:"varint,12,rep,packed,name=vr_int64,json=vrInt64,proto3" json:"vr_int64,omitempty"`
	xxx_hidden_VrUint64 []uint64               `protobuf:"varint,13,rep,packed,name=vr_uint64,json=vrUint64,proto3" json:"vr_uint64,omitempty"`
	xxx_hidden_VrBool   []bool                 `protobuf:"varint,14,rep,packed,name=vr_bool,json=vrBool,proto3" json:"vr_bool,omitempty"`
	xxx_hidden_VrString []string               `protobuf:"bytes,15,rep,name=vr_string,json=vrString,proto3" json:"vr_string,omitempty"`
	xxx_hidden_VrBytes  [][]byte               `protobuf:"bytes,16,rep,name=vr_bytes,json=vrBytes,proto3" json:"vr_bytes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FooVrAddRequest) Reset() {
	*x = FooVrAddRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVrAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVrAddRequest) ProtoMessage() {}

func (x *FooVrAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVrAddRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *FooVrAddRequest) GetVrDouble() []float64 {
	if x != nil {
		return x.xxx_hidden_VrDouble
	}
	return nil
}

func (x *FooVrAddRequest) GetVrInt64() []int64 {
	if x != nil {
		return x.xxx_hidden_VrInt64
	}
	return nil
}

func (x *FooVrAddRequest) GetVrUint64() []uint64 {
	if x != nil {
		return x.xxx_hidden_VrUint64
	}
	return nil
}

func (x *FooVrAddRequest) GetVrBool() []bool {
	if x != nil {
		return x.xxx_hidden_VrBool
	}
	return nil
}

func (x *FooVrAddRequest) GetVrString() []string {
	if x != nil {
		return x.xxx_hidden_VrString
	}
	return nil
}

func (x *FooVrAddRequest) GetVrBytes() [][]byte {
	if x != nil {
		return x.xxx_hidden_VrBytes
	}
	return nil
}

func (x *FooVrAddRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *FooVrAddRequest) SetVrDouble(v []float64) {
	x.xxx_hidden_VrDouble = v
}

func (x *FooVrAddRequest) SetVrInt64(v []int64) {
	x.xxx_hidden_VrInt64 = v
}

func (x *FooVrAddRequest) SetVrUint64(v []uint64) {
	x.xxx_hidden_VrUint64 = v
}

func (x *FooVrAddRequest) SetVrBool(v []bool) {
	x.xxx_hidden_VrBool = v
}

func (x *FooVrAddRequest) SetVrString(v []string) {
	x.xxx_hidden_VrString = v
}

func (x *FooVrAddRequest) SetVrBytes(v [][]byte) {
	x.xxx_hidden_VrBytes = v
}

type FooVrAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       int64
	VrDouble []float64
	VrInt64  []int64
	VrUint64 []uint64
	VrBool   []bool
	VrString []string
	VrBytes  [][]byte
}

func (b0 FooVrAddRequest_builder) Build() *FooVrAddRequest {
	m0 := &FooVrAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_VrDouble = b.VrDouble
	x.xxx_hidden_VrInt64 = b.VrInt64
	x.xxx_hidden_VrUint64 = b.VrUint64
	x.xxx_hidden_VrBool = b.VrBool
	x.xxx_hidden_VrString = b.VrString
	x.xxx_hidden_VrBytes = b.VrBytes
	return m0
}

type FooVrGetRequest struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isFooVrGetRequest_Key  `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FooVrGetRequest) Reset() {
	*x = FooVrGetRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVrGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVrGetRequest) ProtoMessage() {}

func (x *FooVrGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVrGetRequest) GetId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*fooVrGetRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *FooVrGetRequest) SetId(v int64) {
	x.xxx_hidden_Key = &fooVrGetRequest_Id{v}
}

func (x *FooVrGetRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooVrGetRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*fooVrGetRequest_Id)
	return ok
}

func (x *FooVrGetRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *FooVrGetRequest) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*fooVrGetRequest_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const FooVrGetRequest_Key_not_set_case case_FooVrGetRequest_Key = 0
const FooVrGetRequest_Id_case case_FooVrGetRequest_Key = 1

func (x *FooVrGetRequest) WhichKey() case_FooVrGetRequest_Key {
	if x == nil {
		return FooVrGetRequest_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *fooVrGetRequest_Id:
		return FooVrGetRequest_Id_case
	default:
		return FooVrGetRequest_Key_not_set_case
	}
}

type FooVrGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id *int64
	// -- end of xxx_hidden_Key
}

func (b0 FooVrGetRequest_builder) Build() *FooVrGetRequest {
	m0 := &FooVrGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &fooVrGetRequest_Id{*b.Id}
	}
	return m0
}

type case_FooVrGetRequest_Key protoreflect.FieldNumber

func (x case_FooVrGetRequest_Key) String() string {
	md := file_example_library_foo_g_proto_msgTypes[28].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFooVrGetRequest_Key interface {
	isFooVrGetRequest_Key()
}

type fooVrGetRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*fooVrGetRequest_Id) isFooVrGetRequest_Key() {}

type FooVrPatchRequest struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key      *FooVrGetRequest       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_VrDouble []float64              `protobuf:"fixed64,21,rep,packed,name=vr_double,json=vrDouble,proto3" json:"vr_double,omitempty"`
	xxx_hidden_VrInt64  []int64                `protobuf:"varint,23,rep,packed,name=vr_int64,json=vrInt64,proto3" json:"vr_int64,omitempty"`
	xxx_hidden_VrUint64 []uint64               `protobuf:"varint,25,rep,packed,name=vr_uint64,json=vrUint64,proto3" json:"vr_uint64,omitempty"`
	xxx_hidden_VrBool   []bool                 `protobuf:"varint,27,rep,packed,name=vr_bool,json=vrBool,proto3" json:"vr_bool,omitempty"`
	xxx_hidden_VrString []string               `protobuf:"bytes,29,rep,name=vr_string,json=vrString,proto3" json:"vr_string,omitempty"`
	xxx_hidden_VrBytes  [][]byte               `protobuf:"bytes,31,rep,name=vr_bytes,json=vrBytes,proto3" json:"vr_bytes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FooVrPatchRequest) Reset() {
	*x = FooVrPatchRequest{}
	mi := &file_example_library_foo_g_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooVrPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooVrPatchRequest) ProtoMessage() {}

func (x *FooVrPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_library_foo_g_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FooVrPatchRequest) GetKey() *FooVrGetRequest {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *FooVrPatchRequest) GetVrDouble() []float64 {
	if x != nil {
		return x.xxx_hidden_VrDouble
	}
	return nil
}

func (x *FooVrPatchRequest) GetVrInt64() []int64 {
	if x != nil {
		return x.xxx_hidden_VrInt64
	}
	return nil
}

func (x *FooVrPatchRequest) GetVrUint64() []uint64 {
	if x != nil {
		return x.xxx_hidden_VrUint64
	}
	return nil
}

func (x *FooVrPatchRequest) GetVrBool() []bool {
	if x != nil {
		return x.xxx_hidden_VrBool
	}
	return nil
}

func (x *FooVrPatchRequest) GetVrString() []string {
	if x != nil {
		return x.xxx_hidden_VrString
	}
	return nil
}

func (x *FooVrPatchRequest) GetVrBytes() [][]byte {
	if x != nil {
		return x.xxx_hidden_VrBytes
	}
	return nil
}

func (x *FooVrPatchRequest) SetKey(v *FooVrGetRequest) {
	x.xxx_hidden_Key = v
}

func (x *FooVrPatchRequest) SetVrDouble(v []float64) {
	x.xxx_hidden_VrDouble = v
}

func (x *FooVrPatchRequest) SetVrInt64(v []int64) {
	x.xxx_hidden_VrInt64 = v
}

func (x *FooVrPatchRequest) SetVrUint64(v []uint64) {
	x.xxx_hidden_VrUint64 = v
}

func (x *FooVrPatchRequest) SetVrBool(v []bool) {
	x.xxx_hidden_VrBool = v
}

func (x *FooVrPatchRequest) SetVrString(v []string) {
	x.xxx_hidden_VrString = v
}

func (x *FooVrPatchRequest) SetVrBytes(v [][]byte) {
	x.xxx_hidden_VrBytes = v
}

func (x *FooVrPatchRequest) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *FooVrPatchRequest) ClearKey() {
	x.xxx_hidden_Key = nil
}

type FooVrPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key      *FooVrGetRequest
	VrDouble []float64
	VrInt64  []int64
	VrUint64 []uint64
	VrBool   []bool
	VrString []string
	VrBytes  [][]byte
}

func (b0 FooVrPatchRequest_builder) Build() *FooVrPatchRequest {
	m0 := &FooVrPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_VrDouble = b.VrDouble
	x.xxx_hidden_VrInt64 = b.VrInt64
	x.xxx_hidden_VrUint64 = b.VrUint64
	x.xxx_hidden_VrBool = b.VrBool
	x.xxx_hidden_VrString = b.VrString
	x.xxx_hidden_VrBytes = b.VrBytes
	return m0
}

var File_example_library_foo_g_proto protoreflect.FileDescriptor

var file_example_library_foo_g_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2f, 0x66, 0x6f, 0x6f, 0x2e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x1a, 0x1c,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x66, 0x6f,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x06, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x66, 0x5f,
	0x76, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x66, 0x56, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x66, 0x5f, 0x76, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x66, 0x56, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x65, 0x66, 0x5f, 0x76, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x52, 0x0a, 0x65, 0x66, 0x56, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3e, 0x0a,
	0x0c, 0x65, 0x66, 0x5f, 0x76, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0a,
	0x65, 0x66, 0x56, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a,
	0x0c, 0x65, 0x66, 0x5f, 0x6d, 0x69, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x66, 0x4d, 0x69, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x66, 0x4d, 0x69, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x52, 0x0a, 0x0c, 0x65, 0x66, 0x5f, 0x6d, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x66, 0x4d, 0x73, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x66, 0x4d, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x0d, 0x65, 0x66, 0x5f, 0x6d, 0x73, 0x64, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x45, 0x66, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x66, 0x4d, 0x73, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x65, 0x66, 0x4d, 0x73, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x1a, 0x56, 0x0a, 0x0f,
	0x45, 0x66, 0x4d, 0x69, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0f, 0x45, 0x66, 0x4d, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x10,
	0x45, 0x66, 0x4d, 0x73, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x66, 0x5f, 0x76, 0x64, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x66, 0x5f, 0x76, 0x6f,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x2a, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x45, 0x66,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x80, 0x07, 0x0a, 0x11, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a,
	0x0b, 0x65, 0x66, 0x5f, 0x76, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x65,
	0x66, 0x56, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x65,
	0x66, 0x5f, 0x76, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x66,
	0x56, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x65,
	0x66, 0x5f, 0x76, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x0a, 0x65, 0x66, 0x56, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x66, 0x5f, 0x76, 0x6f, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0a, 0x65, 0x66, 0x56, 0x6f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0c, 0x65, 0x66, 0x5f, 0x6d, 0x69, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x45, 0x66, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x66, 0x4d, 0x69, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x65, 0x66, 0x4d, 0x69, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0c,
	0x65, 0x66, 0x5f, 0x6d, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x66, 0x4d, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x66, 0x4d, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x57, 0x0a, 0x0d, 0x65, 0x66, 0x5f, 0x6d, 0x73, 0x64, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45,
	0x66, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x66,
	0x4d, 0x73, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x65, 0x66, 0x4d, 0x73, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x1a, 0x56, 0x0a, 0x0f, 0x45,
	0x66, 0x4d, 0x69, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0f, 0x45, 0x66, 0x4d, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x10, 0x45,
	0x66, 0x4d, 0x73, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x66, 0x5f, 0x76, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x66, 0x5f, 0x76, 0x64, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x66, 0x5f, 0x76, 0x6f, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x8e, 0x06, 0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x4b, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6b, 0x5f, 0x76,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x6b, 0x56, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x09, 0x6b, 0x5f, 0x76, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x07, 0x6b, 0x56, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09,
	0x6b, 0x5f, 0x76, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6b, 0x56, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6b, 0x5f, 0x76, 0x6f, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x07, 0x6b, 0x56, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x09, 0x6b, 0x5f, 0x6d, 0x69, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4b, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x4d, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6b, 0x4d, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x6b,
	0x5f, 0x6d, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x46, 0x6f, 0x6f, 0x4b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4b, 0x4d, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6b, 0x4d,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x6b, 0x5f, 0x6d, 0x73, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4b,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x4d, 0x73, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6b, 0x4d, 0x73, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x1a, 0x56, 0x0a, 0x0c, 0x4b, 0x4d, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0c, 0x4b, 0x4d,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0d, 0x4b, 0x4d, 0x73, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6b, 0x5f, 0x76, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6b, 0x5f,
	0x76, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x4b, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0xcb, 0x06, 0x0a, 0x10, 0x46, 0x6f, 0x6f, 0x4b, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4b, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x6b, 0x5f,
	0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x06, 0x6b, 0x56, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x6b, 0x5f, 0x76, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x07, 0x6b, 0x56, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x6b, 0x5f, 0x76, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x6b, 0x56, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6b, 0x5f,
	0x76, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x6b, 0x56, 0x6f,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x6b, 0x5f, 0x6d, 0x69, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f,
	0x4b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x4d,
	0x69, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6b, 0x4d, 0x69, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x6b, 0x5f, 0x6d, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4b, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x4d, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6b, 0x4d, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x0a, 0x6b, 0x5f, 0x6d, 0x73, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x4d, 0x73, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6b, 0x4d, 0x73, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x56,
	0x0a, 0x0c, 0x4b, 0x4d, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0c, 0x4b, 0x4d, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57,
	0x0a, 0x0d, 0x4b, 0x4d, 0x73, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6b, 0x5f, 0x76, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6b, 0x5f, 0x76, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6b, 0x5f, 0x76, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xe5, 0x06, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x76, 0x6d, 0x69, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x69, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x69, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x76, 0x6d, 0x69, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x69, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x6d, 0x69, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x4e, 0x0a, 0x0a, 0x76, 0x6d, 0x69, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x69, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x69, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x48, 0x0a, 0x08, 0x76, 0x6d, 0x69, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x69, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x76, 0x6d, 0x69, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x0a, 0x76,
	0x6d, 0x69, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x6d, 0x69, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x76, 0x6d, 0x69, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x09, 0x76,
	0x6d, 0x69, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x6d, 0x69, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x76, 0x6d, 0x69, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x69, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x56, 0x6d, 0x69, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x69, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x56, 0x6d, 0x69, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x56, 0x6d, 0x69, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x56,
	0x6d, 0x69, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x4d,
	0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x97, 0x07, 0x0a, 0x11, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50,
	0x0a, 0x0a, 0x76, 0x6d, 0x69, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x69, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x69, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x4d, 0x0a, 0x09, 0x76, 0x6d, 0x69, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x69, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x6d, 0x69, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x50, 0x0a, 0x0a, 0x76, 0x6d, 0x69, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x69, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x69, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x4a, 0x0a, 0x08, 0x76, 0x6d, 0x69, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x69, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x6d, 0x69, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x50, 0x0a,
	0x0a, 0x76, 0x6d, 0x69, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x69, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x69, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x4d, 0x0a, 0x09, 0x76, 0x6d, 0x69, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x69, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x6d, 0x69, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3c,
	0x0a, 0x0e, 0x56, 0x6d, 0x69, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x56, 0x6d, 0x69, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x69,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x56, 0x6d, 0x69, 0x42, 0x6f,
	0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x69, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x56, 0x6d, 0x69, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5,
	0x06, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x76, 0x6d, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x73, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x73, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x76, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x4e, 0x0a, 0x0a, 0x76, 0x6d, 0x73, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x48, 0x0a, 0x08, 0x76, 0x6d, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x76, 0x6d, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x0a, 0x76, 0x6d, 0x73,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e,
	0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x6d, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x76, 0x6d, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x09, 0x76, 0x6d, 0x73,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x4d, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x6d, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x6d,
	0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x73, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x56, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x56, 0x6d, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56,
	0x6d, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x56, 0x6d, 0x73,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x97, 0x07, 0x0a, 0x11, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x0a,
	0x76, 0x6d, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x4d,
	0x0a, 0x09, 0x76, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x50, 0x0a,
	0x0a, 0x76, 0x6d, 0x73, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x4a, 0x0a, 0x08, 0x76, 0x6d, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x76, 0x6d, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x50, 0x0a, 0x0a, 0x76,
	0x6d, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x76, 0x6d, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a,
	0x09, 0x76, 0x6d, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x76, 0x6d, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e,
	0x56, 0x6d, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x56, 0x6d,
	0x73, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x73, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x56, 0x6d, 0x73, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x6d, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3b, 0x0a, 0x0d, 0x56, 0x6d, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x06, 0x0a,
	0x10, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x6d, 0x73, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x64, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x73, 0x64, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x6d, 0x73, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x64, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x73, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x4f, 0x0a, 0x0a, 0x6d, 0x73, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x73, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x73, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x73, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x4f, 0x0a, 0x0a,
	0x6d, 0x73, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x6d, 0x73, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a,
	0x09, 0x6d, 0x73, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x73, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d,
	0x73, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x73, 0x64,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x73, 0x64, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x73, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x73, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x73, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x10, 0x46,
	0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x9f, 0x07, 0x0a, 0x12, 0x46, 0x6f, 0x6f,
	0x4d, 0x73, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x73, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73,
	0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73,
	0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x73,
	0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x6d, 0x73, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f,
	0x4d, 0x73, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x73, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x73, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x73, 0x64, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f,
	0x6f, 0x4d, 0x73, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x73, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x6d, 0x73, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x73,
	0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x73, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6d, 0x73, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x73, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f,
	0x6f, 0x4d, 0x73, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x73, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x6d, 0x73, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x09, 0x6d, 0x73,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e,
	0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x73, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x73, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x73,
	0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x73, 0x64, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x73, 0x64, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x73, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3c, 0x0a, 0x0e, 0x4d, 0x73, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x73, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x46,
	0x6f, 0x6f, 0x56, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x76, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06,
	0x76, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x76, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x76, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x56, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0xc7, 0x02, 0x0a, 0x10, 0x46, 0x6f, 0x6f, 0x56, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07,
	0x76, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x76,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x07, 0x76, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x76, 0x42, 0x6f, 0x6f,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x76, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x06, 0x76, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x76, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a,
	0x0f, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x64, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x64, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x76,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x09,
	0x76, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x08, 0x76, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x76, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x07, 0x76, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x76, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x08, 0x76, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x76, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x06, 0x76, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x76, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x08, 0x76, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x76, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x05, 0x52, 0x07, 0x76, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x76, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x76, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x64,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x22, 0xb5, 0x02, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x76, 0x6f, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x6f, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x08, 0x76, 0x6f, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x6f, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x42,
	0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x76, 0x6f, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x6f, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x07, 0x76, 0x6f,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6f, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x76, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x56,
	0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x08, 0x76, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x76, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x08, 0x76, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x76, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x76, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x76, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6f, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x6f, 0x6e, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x76,
	0x6f, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x76,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x08, 0x76, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x76, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x09, 0x76, 0x6f, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x76, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x76, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x6e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6e, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2b, 0x0a,
	0x10, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xd7, 0x04, 0x0a, 0x12, 0x46,
	0x6f, 0x6f, 0x56, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x6f, 0x6e, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x76, 0x6f,
	0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f,
	0x6e, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x6f, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x6f,
	0x6e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x6f,
	0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02,
	0x52, 0x09, 0x76, 0x6f, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0f, 0x76, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x6f, 0x6e, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x6f, 0x6e, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x76, 0x6f, 0x6e, 0x42,
	0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x6f, 0x6e, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76,
	0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x09, 0x76, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0f, 0x76, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x6e, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x6f, 0x6e, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x76, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x76, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76,
	0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x6e, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x56, 0x72, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x72, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x76, 0x72, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x76, 0x72, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x08, 0x76, 0x72, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06,
	0x76, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x72, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x72, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x76, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2a,
	0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x56, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xed, 0x01, 0x0a, 0x11, 0x46,
	0x6f, 0x6f, 0x56, 0x72, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e,
	0x46, 0x6f, 0x6f, 0x56, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x76, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x76, 0x72, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x19, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x08, 0x76, 0x72, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x72, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x76, 0x72, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x07, 0x76, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x98, 0x02, 0x0a, 0x0c, 0x46,
	0x6f, 0x6f, 0x45, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x41,
	0x64, 0x64, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x12, 0x3f, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x12, 0x43, 0x0a,
	0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x45, 0x66, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x45, 0x72, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f,
	0x6f, 0x45, 0x66, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x91, 0x02, 0x0a, 0x0b, 0x46, 0x6f, 0x6f, 0x4b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x1f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x4b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e,
	0x46, 0x6f, 0x6f, 0x4b, 0x12, 0x3d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f,
	0x6f, 0x4b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x4b, 0x12, 0x42, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x4b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x45, 0x72, 0x61, 0x73, 0x65,
	0x12, 0x1f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x98, 0x02, 0x0a, 0x0c, 0x46, 0x6f,
	0x6f, 0x4d, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x41, 0x64,
	0x64, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x12, 0x3f, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x12, 0x43, 0x0a, 0x05,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x69, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x41, 0x0a, 0x05, 0x45, 0x72, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f,
	0x4d, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0x98, 0x02, 0x0a, 0x0c, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x20, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x4d, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x12, 0x3f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x20, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e,
	0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05,
	0x45, 0x72, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32,
	0x9f, 0x02, 0x0a, 0x0d, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73,
	0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f,
	0x6f, 0x4d, 0x73, 0x64, 0x12, 0x41, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f,
	0x6f, 0x4d, 0x73, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x23, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a,
	0x05, 0x45, 0x72, 0x61, 0x73, 0x65, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x4d, 0x73, 0x64, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0x91, 0x02, 0x0a, 0x0b, 0x46, 0x6f, 0x6f, 0x56, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x1f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56,
	0x12, 0x3d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x12,
	0x42, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x45, 0x72, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x98, 0x02, 0x0a, 0x0c, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x20, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e,
	0x46, 0x6f, 0x6f, 0x56, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x12, 0x3f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x20,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a,
	0x05, 0x45, 0x72, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x64, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x32, 0x98, 0x02, 0x0a, 0x0c, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3f, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x6f,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f,
	0x56, 0x6f, 0x12, 0x3f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56,
	0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f,
	0x6f, 0x56, 0x6f, 0x12, 0x43, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x56, 0x6f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x45, 0x72, 0x61, 0x73,
	0x65, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x9f, 0x02, 0x0a, 0x0d,
	0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a,
	0x03, 0x41, 0x64, 0x64, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f,
	0x56, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6f, 0x6f, 0x56, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x45, 0x72, 0x61,
	0x73, 0x65, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x98, 0x02,
	0x0a, 0x0c, 0x46, 0x6f, 0x6f, 0x56, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f,
	0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x72, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x72, 0x12,
	0x3f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x72, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x72,
	0x12, 0x43, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x6f, 0x56,
	0x72, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x45, 0x72, 0x61, 0x73, 0x65, 0x12, 0x20,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x46, 0x6f, 0x6f, 0x56, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x73, 0x6f, 0x6d, 0x6e, 0x75, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x6f, 0x72, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_example_library_foo_g_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_example_library_foo_g_proto_goTypes = []any{
	(*FooEfAddRequest)(nil),       // 0: example.library.FooEfAddRequest
	(*FooEfGetRequest)(nil),       // 1: example.library.FooEfGetRequest
	(*FooEfPatchRequest)(nil),     // 2: example.library.FooEfPatchRequest
	(*FooKAddRequest)(nil),        // 3: example.library.FooKAddRequest
	(*FooKGetRequest)(nil),        // 4: example.library.FooKGetRequest
	(*FooKPatchRequest)(nil),      // 5: example.library.FooKPatchRequest
	(*FooMiAddRequest)(nil),       // 6: example.library.FooMiAddRequest
	(*FooMiGetRequest)(nil),       // 7: example.library.FooMiGetRequest
	(*FooMiPatchRequest)(nil),     // 8: example.library.FooMiPatchRequest
	(*FooMsAddRequest)(nil),       // 9: example.library.FooMsAddRequest
	(*FooMsGetRequest)(nil),       // 10: example.library.FooMsGetRequest
	(*FooMsPatchRequest)(nil),     // 11: example.library.FooMsPatchRequest
	(*FooMsdAddRequest)(nil),      // 12: example.library.FooMsdAddRequest
	(*FooMsdGetRequest)(nil),      // 13: example.library.FooMsdGetRequest
	(*FooMsdPatchRequest)(nil),    // 14: example.library.FooMsdPatchRequest
	(*FooVAddRequest)(nil),        // 15: example.library.FooVAddRequest
	(*FooVGetRequest)(nil),        // 16: example.library.FooVGetRequest
	(*FooVPatchRequest)(nil),      // 17: example.library.FooVPatchRequest
	(*FooVdAddRequest)(nil),       // 18: example.library.FooVdAddRequest
	(*FooVdGetRequest)(nil),       // 19: example.library.FooVdGetRequest
	(*FooVdPatchRequest)(nil),     // 20: example.library.FooVdPatchRequest
	(*FooVoAddRequest)(nil),       // 21: example.library.FooVoAddRequest
	(*FooVoGetRequest)(nil),       // 22: example.library.FooVoGetRequest
	(*FooVoPatchRequest)(nil),     // 23: example.library.FooVoPatchRequest
	(*FooVonAddRequest)(nil),      // 24: example.library.FooVonAddRequest
	(*FooVonGetRequest)(nil),      // 25: example.library.FooVonGetRequest
	(*FooVonPatchRequest)(nil),    // 26: example.library.FooVonPatchRequest
	(*FooVrAddRequest)(nil),       // 27: example.library.FooVrAddRequest
	(*FooVrGetRequest)(nil),       // 28: example.library.FooVrGetRequest
	(*FooVrPatchRequest)(nil),     // 29: example.library.FooVrPatchRequest
	nil,                           // 30: example.library.FooEfAddRequest.EfMiAuthorEntry
	nil,                           // 31: example.library.FooEfAddRequest.EfMsAuthorEntry
	nil,                           // 32: example.library.FooEfAddRequest.EfMsdAuthorEntry
	nil,                           // 33: example.library.FooEfPatchRequest.EfMiAuthorEntry
	nil,                           // 34: example.library.FooEfPatchRequest.EfMsAuthorEntry
	nil,                           // 35: example.library.FooEfPatchRequest.EfMsdAuthorEntry
	nil,                           // 36: example.library.FooKAddRequest.KMiTimeEntry
	nil,                           // 37: example.library.FooKAddRequest.KMsTimeEntry
	nil,                           // 38: example.library.FooKAddRequest.KMsdTimeEntry
	nil,                           // 39: example.library.FooKPatchRequest.KMiTimeEntry
	nil,                           // 40: example.library.FooKPatchRequest.KMsTimeEntry
	nil,                           // 41: example.library.FooKPatchRequest.KMsdTimeEntry
	nil,                           // 42: example.library.FooMiAddRequest.VmiDoubleEntry
	nil,                           // 43: example.library.FooMiAddRequest.VmiInt64Entry
	nil,                           // 44: example.library.FooMiAddRequest.VmiUint64Entry
	nil,                           // 45: example.library.FooMiAddRequest.VmiBoolEntry
	nil,                           // 46: example.library.FooMiAddRequest.VmiStringEntry
	nil,                           // 47: example.library.FooMiAddRequest.VmiBytesEntry
	nil,                           // 48: example.library.FooMiPatchRequest.VmiDoubleEntry
	nil,                           // 49: example.library.FooMiPatchRequest.VmiInt64Entry
	nil,                           // 50: example.library.FooMiPatchRequest.VmiUint64Entry
	nil,                           // 51: example.library.FooMiPatchRequest.VmiBoolEntry
	nil,                           // 52: example.library.FooMiPatchRequest.VmiStringEntry
	nil,                           // 53: example.library.FooMiPatchRequest.VmiBytesEntry
	nil,                           // 54: example.library.FooMsAddRequest.VmsDoubleEntry
	nil,                           // 55: example.library.FooMsAddRequest.VmsInt64Entry
	nil,                           // 56: example.library.FooMsAddRequest.VmsUint64Entry
	nil,                           // 57: example.library.FooMsAddRequest.VmsBoolEntry
	nil,                           // 58: example.library.FooMsAddRequest.VmsStringEntry
	nil,                           // 59: example.library.FooMsAddRequest.VmsBytesEntry
	nil,                           // 60: example.library.FooMsPatchRequest.VmsDoubleEntry
	nil,                           // 61: example.library.FooMsPatchRequest.VmsInt64Entry
	nil,                           // 62: example.library.FooMsPatchRequest.VmsUint64Entry
	nil,                           // 63: example.library.FooMsPatchRequest.VmsBoolEntry
	nil,                           // 64: example.library.FooMsPatchRequest.VmsStringEntry
	nil,                           // 65: example.library.FooMsPatchRequest.VmsBytesEntry
	nil,                           // 66: example.library.FooMsdAddRequest.MsdDoubleEntry
	nil,                           // 67: example.library.FooMsdAddRequest.MsdInt64Entry
	nil,                           // 68: example.library.FooMsdAddRequest.MsdUint64Entry
	nil,                           // 69: example.library.FooMsdAddRequest.MsdBoolEntry
	nil,                           // 70: example.library.FooMsdAddRequest.MsdStringEntry
	nil,                           // 71: example.library.FooMsdAddRequest.MsdBytesEntry
	nil,                           // 72: example.library.FooMsdPatchRequest.MsdDoubleEntry
	nil,                           // 73: example.library.FooMsdPatchRequest.MsdInt64Entry
	nil,                           // 74: example.library.FooMsdPatchRequest.MsdUint64Entry
	nil,                           // 75: example.library.FooMsdPatchRequest.MsdBoolEntry
	nil,                           // 76: example.library.FooMsdPatchRequest.MsdStringEntry
	nil,                           // 77: example.library.FooMsdPatchRequest.MsdBytesEntry
	(*Author)(nil),                // 78: example.library.Author
	(*timestamppb.Timestamp)(nil), // 79: google.protobuf.Timestamp
	(*FooEf)(nil),                 // 80: example.library.FooEf
	(*emptypb.Empty)(nil),         // 81: google.protobuf.Empty
	(*FooK)(nil),                  // 82: example.library.FooK
	(*FooMi)(nil),                 // 83: example.library.FooMi
	(*FooMs)(nil),                 // 84: example.library.FooMs
	(*FooMsd)(nil),                // 85: example.library.FooMsd
	(*FooV)(nil),                  // 86: example.library.FooV
	(*FooVd)(nil),                 // 87: example.library.FooVd
	(*FooVo)(nil),                 // 88: example.library.FooVo
	(*FooVon)(nil),                // 89: example.library.FooVon
	(*FooVr)(nil),                 // 90: example.library.FooVr
}
var file_example_library_foo_g_proto_depIdxs = []int32{
	78,  // 0: example.library.FooEfAddRequest.ef_v_author:type_name -> example.library.Author
	78,  // 1: example.library.FooEfAddRequest.ef_vd_author:type_name -> example.library.Author
	78,  // 2: example.library.FooEfAddRequest.ef_vr_author:type_name -> example.library.Author
	78,  // 3: example.library.FooEfAddRequest.ef_vo_author:type_name -> example.library.Author
	30,  // 4: example.library.FooEfAddRequest.ef_mi_author:type_name -> example.library.FooEfAddRequest.EfMiAuthorEntry
	31,  // 5: example.library.FooEfAddRequest.ef_ms_author:type_name -> example.library.FooEfAddRequest.EfMsAuthorEntry
	32,  // 6: example.library.FooEfAddRequest.ef_msd_author:type_name -> example.library.FooEfAddRequest.EfMsdAuthorEntry
	1,   // 7: example.library.FooEfPatchRequest.key:type_name -> example.library.FooEfGetRequest
	78,  // 8: example.library.FooEfPatchRequest.ef_v_author:type_name -> example.library.Author
	78,  // 9: example.library.FooEfPatchRequest.ef_vd_author:type_name -> example.library.Author
	78,  // 10: example.library.FooEfPatchRequest.ef_vr_author:type_name -> example.library.Author
	78,  // 11: example.library.FooEfPatchRequest.ef_vo_author:type_name -> example.library.Author
	33,  // 12: example.library.FooEfPatchRequest.ef_mi_author:type_name -> example.library.FooEfPatchRequest.EfMiAuthorEntry
	34,  // 13: example.library.FooEfPatchRequest.ef_ms_author:type_name -> example.library.FooEfPatchRequest.EfMsAuthorEntry
	35,  // 14: example.library.FooEfPatchRequest.ef_msd_author:type_name -> example.library.FooEfPatchRequest.EfMsdAuthorEntry
	79,  // 15: example.library.FooKAddRequest.k_v_time:type_name -> google.protobuf.Timestamp
	79,  // 16: example.library.FooKAddRequest.k_vd_time:type_name -> google.protobuf.Timestamp
	79,  // 17: example.library.FooKAddRequest.k_vr_time:type_name -> google.protobuf.Timestamp
	79,  // 18: example.library.FooKAddRequest.k_vo_time:type_name -> google.protobuf.Timestamp
	36,  // 19: example.library.FooKAddRequest.k_mi_time:type_name -> example.library.FooKAddRequest.KMiTimeEntry
	37,  // 20: example.library.FooKAddRequest.k_ms_time:type_name -> example.library.FooKAddRequest.KMsTimeEntry
	38,  // 21: example.library.FooKAddRequest.k_msd_time:type_name -> example.library.FooKAddRequest.KMsdTimeEntry
	4,   // 22: example.library.FooKPatchRequest.key:type_name -> example.library.FooKGetRequest
	79,  // 23: example.library.FooKPatchRequest.k_v_time:type_name -> google.protobuf.Timestamp
	79,  // 24: example.library.FooKPatchRequest.k_vd_time:type_name -> google.protobuf.Timestamp
	79,  // 25: example.library.FooKPatchRequest.k_vr_time:type_name -> google.protobuf.Timestamp
	79,  // 26: example.library.FooKPatchRequest.k_vo_time:type_name -> google.protobuf.Timestamp
	39,  // 27: example.library.FooKPatchRequest.k_mi_time:type_name -> example.library.FooKPatchRequest.KMiTimeEntry
	40,  // 28: example.library.FooKPatchRequest.k_ms_time:type_name -> example.library.FooKPatchRequest.KMsTimeEntry
	41,  // 29: example.library.FooKPatchRequest.k_msd_time:type_name -> example.library.FooKPatchRequest.KMsdTimeEntry
	42,  // 30: example.library.FooMiAddRequest.vmi_double:type_name -> example.library.FooMiAddRequest.VmiDoubleEntry
	43,  // 31: example.library.FooMiAddRequest.vmi_int64:type_name -> example.library.FooMiAddRequest.VmiInt64Entry
	44,  // 32: example.library.FooMiAddRequest.vmi_uint64:type_name -> example.library.FooMiAddRequest.VmiUint64Entry
	45,  // 33: example.library.FooMiAddRequest.vmi_bool:type_name -> example.library.FooMiAddRequest.VmiBoolEntry
	46,  // 34: example.library.FooMiAddRequest.vmi_string:type_name -> example.library.FooMiAddRequest.VmiStringEntry
	47,  // 35: example.library.FooMiAddRequest.vmi_bytes:type_name -> example.library.FooMiAddRequest.VmiBytesEntry
	7,   // 36: example.library.FooMiPatchRequest.key:type_name -> example.library.FooMiGetRequest
	48,  // 37: example.library.FooMiPatchRequest.vmi_double:type_name -> example.library.FooMiPatchRequest.VmiDoubleEntry
	49,  // 38: example.library.FooMiPatchRequest.vmi_int64:type_name -> example.library.FooMiPatchRequest.VmiInt64Entry
	50,  // 39: example.library.FooMiPatchRequest.vmi_uint64:type_name -> example.library.FooMiPatchRequest.VmiUint64Entry
	51,  // 40: example.library.FooMiPatchRequest.vmi_bool:type_name -> example.library.FooMiPatchRequest.VmiBoolEntry
	52,  // 41: example.library.FooMiPatchRequest.vmi_string:type_name -> example.library.FooMiPatchRequest.VmiStringEntry
	53,  // 42: example.library.FooMiPatchRequest.vmi_bytes:type_name -> example.library.FooMiPatchRequest.VmiBytesEntry
	54,  // 43: example.library.FooMsAddRequest.vms_double:type_name -> example.library.FooMsAddRequest.VmsDoubleEntry
	55,  // 44: example.library.FooMsAddRequest.vms_int64:type_name -> example.library.FooMsAddRequest.VmsInt64Entry
	56,  // 45: example.library.FooMsAddRequest.vms_uint64:type_name -> example.library.FooMsAddRequest.VmsUint64Entry
	57,  // 46: example.library.FooMsAddRequest.vms_bool:type_name -> example.library.FooMsAddRequest.VmsBoolEntry
	58,  // 47: example.library.FooMsAddRequest.vms_string:type_name -> example.library.FooMsAddRequest.VmsStringEntry
	59,  // 48: example.library.FooMsAddRequest.vms_bytes:type_name -> example.library.FooMsAddRequest.VmsBytesEntry
	10,  // 49: example.library.FooMsPatchRequest.key:type_name -> example.library.FooMsGetRequest
	60,  // 50: example.library.FooMsPatchRequest.vms_double:type_name -> example.library.FooMsPatchRequest.VmsDoubleEntry
	61,  // 51: example.library.FooMsPatchRequest.vms_int64:type_name -> example.library.FooMsPatchRequest.VmsInt64Entry
	62,  // 52: example.library.FooMsPatchRequest.vms_uint64:type_name -> example.library.FooMsPatchRequest.VmsUint64Entry
	63,  // 53: example.library.FooMsPatchRequest.vms_bool:type_name -> example.library.FooMsPatchRequest.VmsBoolEntry
	64,  // 54: example.library.FooMsPatchRequest.vms_string:type_name -> example.library.FooMsPatchRequest.VmsStringEntry
	65,  // 55: example.library.FooMsPatchRequest.vms_bytes:type_name -> example.library.FooMsPatchRequest.VmsBytesEntry
	66,  // 56: example.library.FooMsdAddRequest.msd_double:type_name -> example.library.FooMsdAddRequest.MsdDoubleEntry
	67,  // 57: example.library.FooMsdAddRequest.msd_int64:type_name -> example.library.FooMsdAddRequest.MsdInt64Entry
	68,  // 58: example.library.FooMsdAddRequest.msd_uint64:type_name -> example.library.FooMsdAddRequest.MsdUint64Entry
	69,  // 59: example.library.FooMsdAddRequest.msd_bool:type_name -> example.library.FooMsdAddRequest.MsdBoolEntry
	70,  // 60: example.library.FooMsdAddRequest.msd_string:type_name -> example.library.FooMsdAddRequest.MsdStringEntry
	71,  // 61: example.library.FooMsdAddRequest.msd_bytes:type_name -> example.library.FooMsdAddRequest.MsdBytesEntry
	13,  // 62: example.library.FooMsdPatchRequest.key:type_name -> example.library.FooMsdGetRequest
	72,  // 63: example.library.FooMsdPatchRequest.msd_double:type_name -> example.library.FooMsdPatchRequest.MsdDoubleEntry
	73,  // 64: example.library.FooMsdPatchRequest.msd_int64:type_name -> example.library.FooMsdPatchRequest.MsdInt64Entry
	74,  // 65: example.library.FooMsdPatchRequest.msd_uint64:type_name -> example.library.FooMsdPatchRequest.MsdUint64Entry
	75,  // 66: example.library.FooMsdPatchRequest.msd_bool:type_name -> example.library.FooMsdPatchRequest.MsdBoolEntry
	76,  // 67: example.library.FooMsdPatchRequest.msd_string:type_name -> example.library.FooMsdPatchRequest.MsdStringEntry
	77,  // 68: example.library.FooMsdPatchRequest.msd_bytes:type_name -> example.library.FooMsdPatchRequest.MsdBytesEntry
	16,  // 69: example.library.FooVPatchRequest.key:type_name -> example.library.FooVGetRequest
	19,  // 70: example.library.FooVdPatchRequest.key:type_name -> example.library.FooVdGetRequest
	22,  // 71: example.library.FooVoPatchRequest.key:type_name -> example.library.FooVoGetRequest
	25,  // 72: example.library.FooVonPatchRequest.key:type_name -> example.library.FooVonGetRequest
	28,  // 73: example.library.FooVrPatchRequest.key:type_name -> example.library.FooVrGetRequest
	78,  // 74: example.library.FooEfAddRequest.EfMiAuthorEntry.value:type_name -> example.library.Author
	78,  // 75: example.library.FooEfAddRequest.EfMsAuthorEntry.value:type_name -> example.library.Author
	78,  // 76: example.library.FooEfAddRequest.EfMsdAuthorEntry.value:type_name -> example.library.Author
	78,  // 77: example.library.FooEfPatchRequest.EfMiAuthorEntry.value:type_name -> example.library.Author
	78,  // 78: example.library.FooEfPatchRequest.EfMsAuthorEntry.value:type_name -> example.library.Author
	78,  // 79: example.library.FooEfPatchRequest.EfMsdAuthorEntry.value:type_name -> example.library.Author
	79,  // 80: example.library.FooKAddRequest.KMiTimeEntry.value:type_name -> google.protobuf.Timestamp
	79,  // 81: example.library.FooKAddRequest.KMsTimeEntry.value:type_name -> google.protobuf.Timestamp
	79,  // 82: example.library.FooKAddRequest.KMsdTimeEntry.value:type_name -> google.protobuf.Timestamp
	79,  // 83: example.library.FooKPatchRequest.KMiTimeEntry.value:type_name -> google.protobuf.Timestamp
	79,  // 84: example.library.FooKPatchRequest.KMsTimeEntry.value:type_name -> google.protobuf.Timestamp
	79,  // 85: example.library.FooKPatchRequest.KMsdTimeEntry.value:type_name -> google.protobuf.Timestamp
	0,   // 86: example.library.FooEfService.Add:input_type -> example.library.FooEfAddRequest
	1,   // 87: example.library.FooEfService.Get:input_type -> example.library.FooEfGetRequest
	2,   // 88: example.library.FooEfService.Patch:input_type -> example.library.FooEfPatchRequest
	1,   // 89: example.library.FooEfService.Erase:input_type -> example.library.FooEfGetRequest
	3,   // 90: example.library.FooKService.Add:input_type -> example.library.FooKAddRequest
	4,   // 91: example.library.FooKService.Get:input_type -> example.library.FooKGetRequest
	5,   // 92: example.library.FooKService.Patch:input_type -> example.library.FooKPatchRequest
	4,   // 93: example.library.FooKService.Erase:input_type -> example.library.FooKGetRequest
	6,   // 94: example.library.FooMiService.Add:input_type -> example.library.FooMiAddRequest
	7,   // 95: example.library.FooMiService.Get:input_type -> example.library.FooMiGetRequest
	8,   // 96: example.library.FooMiService.Patch:input_type -> example.library.FooMiPatchRequest
	7,   // 97: example.library.FooMiService.Erase:input_type -> example.library.FooMiGetRequest
	9,   // 98: example.library.FooMsService.Add:input_type -> example.library.FooMsAddRequest
	10,  // 99: example.library.FooMsService.Get:input_type -> example.library.FooMsGetRequest
	11,  // 100: example.library.FooMsService.Patch:input_type -> example.library.FooMsPatchRequest
	10,  // 101: example.library.FooMsService.Erase:input_type -> example.library.FooMsGetRequest
	12,  // 102: example.library.FooMsdService.Add:input_type -> example.library.FooMsdAddRequest
	13,  // 103: example.library.FooMsdService.Get:input_type -> example.library.FooMsdGetRequest
	14,  // 104: example.library.FooMsdService.Patch:input_type -> example.library.FooMsdPatchRequest
	13,  // 105: example.library.FooMsdService.Erase:input_type -> example.library.FooMsdGetRequest
	15,  // 106: example.library.FooVService.Add:input_type -> example.library.FooVAddRequest
	16,  // 107: example.library.FooVService.Get:input_type -> example.library.FooVGetRequest
	17,  // 108: example.library.FooVService.Patch:input_type -> example.library.FooVPatchRequest
	16,  // 109: example.library.FooVService.Erase:input_type -> example.library.FooVGetRequest
	18,  // 110: example.library.FooVdService.Add:input_type -> example.library.FooVdAddRequest
	19,  // 111: example.library.FooVdService.Get:input_type -> example.library.FooVdGetRequest
	20,  // 112: example.library.FooVdService.Patch:input_type -> example.library.FooVdPatchRequest
	19,  // 113: example.library.FooVdService.Erase:input_type -> example.library.FooVdGetRequest
	21,  // 114: example.library.FooVoService.Add:input_type -> example.library.FooVoAddRequest
	22,  // 115: example.library.FooVoService.Get:input_type -> example.library.FooVoGetRequest
	23,  // 116: example.library.FooVoService.Patch:input_type -> example.library.FooVoPatchRequest
	22,  // 117: example.library.FooVoService.Erase:input_type -> example.library.FooVoGetRequest
	24,  // 118: example.library.FooVonService.Add:input_type -> example.library.FooVonAddRequest
	25,  // 119: example.library.FooVonService.Get:input_type -> example.library.FooVonGetRequest
	26,  // 120: example.library.FooVonService.Patch:input_type -> example.library.FooVonPatchRequest
	25,  // 121: example.library.FooVonService.Erase:input_type -> example.library.FooVonGetRequest
	27,  // 122: example.library.FooVrService.Add:input_type -> example.library.FooVrAddRequest
	28,  // 123: example.library.FooVrService.Get:input_type -> example.library.FooVrGetRequest
	29,  // 124: example.library.FooVrService.Patch:input_type -> example.library.FooVrPatchRequest
	28,  // 125: example.library.FooVrService.Erase:input_type -> example.library.FooVrGetRequest
	80,  // 126: example.library.FooEfService.Add:output_type -> example.library.FooEf
	80,  // 127: example.library.FooEfService.Get:output_type -> example.library.FooEf
	81,  // 128: example.library.FooEfService.Patch:output_type -> google.protobuf.Empty
	81,  // 129: example.library.FooEfService.Erase:output_type -> google.protobuf.Empty
	82,  // 130: example.library.FooKService.Add:output_type -> example.library.FooK
	82,  // 131: example.library.FooKService.Get:output_type -> example.library.FooK
	81,  // 132: example.library.FooKService.Patch:output_type -> google.protobuf.Empty
	81,  // 133: example.library.FooKService.Erase:output_type -> google.protobuf.Empty
	83,  // 134: example.library.FooMiService.Add:output_type -> example.library.FooMi
	83,  // 135: example.library.FooMiService.Get:output_type -> example.library.FooMi
	81,  // 136: example.library.FooMiService.Patch:output_type -> google.protobuf.Empty
	81,  // 137: example.library.FooMiService.Erase:output_type -> google.protobuf.Empty
	84,  // 138: example.library.FooMsService.Add:output_type -> example.library.FooMs
	84,  // 139: example.library.FooMsService.Get:output_type -> example.library.FooMs
	81,  // 140: example.library.FooMsService.Patch:output_type -> google.protobuf.Empty
	81,  // 141: example.library.FooMsService.Erase:output_type -> google.protobuf.Empty
	85,  // 142: example.library.FooMsdService.Add:output_type -> example.library.FooMsd
	85,  // 143: example.library.FooMsdService.Get:output_type -> example.library.FooMsd
	81,  // 144: example.library.FooMsdService.Patch:output_type -> google.protobuf.Empty
	81,  // 145: example.library.FooMsdService.Erase:output_type -> google.protobuf.Empty
	86,  // 146: example.library.FooVService.Add:output_type -> example.library.FooV
	86,  // 147: example.library.FooVService.Get:output_type -> example.library.FooV
	81,  // 148: example.library.FooVService.Patch:output_type -> google.protobuf.Empty
	81,  // 149: example.library.FooVService.Erase:output_type -> google.protobuf.Empty
	87,  // 150: example.library.FooVdService.Add:output_type -> example.library.FooVd
	87,  // 151: example.library.FooVdService.Get:output_type -> example.library.FooVd
	81,  // 152: example.library.FooVdService.Patch:output_type -> google.protobuf.Empty
	81,  // 153: example.library.FooVdService.Erase:output_type -> google.protobuf.Empty
	88,  // 154: example.library.FooVoService.Add:output_type -> example.library.FooVo
	88,  // 155: example.library.FooVoService.Get:output_type -> example.library.FooVo
	81,  // 156: example.library.FooVoService.Patch:output_type -> google.protobuf.Empty
	81,  // 157: example.library.FooVoService.Erase:output_type -> google.protobuf.Empty
	89,  // 158: example.library.FooVonService.Add:output_type -> example.library.FooVon
	89,  // 159: example.library.FooVonService.Get:output_type -> example.library.FooVon
	81,  // 160: example.library.FooVonService.Patch:output_type -> google.protobuf.Empty
	81,  // 161: example.library.FooVonService.Erase:output_type -> google.protobuf.Empty
	90,  // 162: example.library.FooVrService.Add:output_type -> example.library.FooVr
	90,  // 163: example.library.FooVrService.Get:output_type -> example.library.FooVr
	81,  // 164: example.library.FooVrService.Patch:output_type -> google.protobuf.Empty
	81,  // 165: example.library.FooVrService.Erase:output_type -> google.protobuf.Empty
	126, // [126:166] is the sub-list for method output_type
	86,  // [86:126] is the sub-list for method input_type
	86,  // [86:86] is the sub-list for extension type_name
	86,  // [86:86] is the sub-list for extension extendee
	0,   // [0:86] is the sub-list for field type_name
}

func init() { file_example_library_foo_g_proto_init() }
func file_example_library_foo_g_proto_init() {
	if File_example_library_foo_g_proto != nil {
		return
	}
	file_example_library_author_proto_init()
	file_example_library_foo_proto_init()
	file_example_library_foo_g_proto_msgTypes[0].OneofWrappers = []any{}
	file_example_library_foo_g_proto_msgTypes[1].OneofWrappers = []any{
		(*fooEfGetRequest_Id)(nil),
	}
	file_example_library_foo_g_proto_msgTypes[2].OneofWrappers = []any{}
	file_example_library_foo_g_proto_msgTypes[3].OneofWrappers = []any{}
	file_example_library_foo_g_proto_msgTypes[4].OneofWrappers = []any{
		(*fooKGetRequest_Id)(nil),
	}
	file_example_library_foo_g_proto_msgTypes[5].OneofWrappers = []any{}
	file_example_library_foo_g_proto_msgTypes[7].OneofWrappers = []any{
		(*fooMiGetRequest_Id)(nil),
	}
	file_example_library_foo_g_proto_msgTypes[10].OneofWrappers = []any{
		(*fooMsGetRequest_Id)(nil),
	}
	file_example_library_foo_g_proto_msgTypes[13].OneofWrappers = []any{
		(*fooMsdGetRequest_Id)(nil),
	}
	file_example_library_foo_g_proto_msgTypes[16].OneofWrappers = []any{
		(*fooVGetRequest_Id)(nil),
	}
	file_example_library_foo_g_proto_msgTypes[17].OneofWrappers = []any{}
	file_example_library_foo_g_proto_msgTypes[19].OneofWrappers = []any{
		(*fooVdGetRequest_Id)(nil),
	}
	file_example_library_foo_g_proto_msgTypes[20].OneofWrappers = []any{}
	file_example_library_foo_g_proto_msgTypes[21].OneofWrappers = []any{}
	file_example_library_foo_g_proto_msgTypes[22].OneofWrappers = []any{
		(*fooVoGetRequest_Id)(nil),
	}
	file_example_library_foo_g_proto_msgTypes[23].OneofWrappers = []any{}
	file_example_library_foo_g_proto_msgTypes[24].OneofWrappers = []any{}
	file_example_library_foo_g_proto_msgTypes[25].OneofWrappers = []any{
		(*fooVonGetRequest_Id)(nil),
	}
	file_example_library_foo_g_proto_msgTypes[26].OneofWrappers = []any{}
	file_example_library_foo_g_proto_msgTypes[28].OneofWrappers = []any{
		(*fooVrGetRequest_Id)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_example_library_foo_g_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   10,
		},
		GoTypes:           file_example_library_foo_g_proto_goTypes,
		DependencyIndexes: file_example_library_foo_g_proto_depIdxs,
		MessageInfos:      file_example_library_foo_g_proto_msgTypes,
	}.Build()
	File_example_library_foo_g_proto = out.File
	file_example_library_foo_g_proto_rawDesc = nil
	file_example_library_foo_g_proto_goTypes = nil
	file_example_library_foo_g_proto_depIdxs = nil
}
