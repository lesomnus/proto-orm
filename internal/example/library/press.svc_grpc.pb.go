// Code generated by "proto-orm-gen-ent". DO NOT EDIT

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: example/library/press.svc.proto

package library

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PressService_Add_FullMethodName   = "/example.library.PressService/Add"
	PressService_Get_FullMethodName   = "/example.library.PressService/Get"
	PressService_Patch_FullMethodName = "/example.library.PressService/Patch"
	PressService_Erase_FullMethodName = "/example.library.PressService/Erase"
)

// PressServiceClient is the client API for PressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PressServiceClient interface {
	Add(ctx context.Context, in *PressAddRequest, opts ...grpc.CallOption) (*Press, error)
	Get(ctx context.Context, in *PressGetRequest, opts ...grpc.CallOption) (*Press, error)
	Patch(ctx context.Context, in *PressPatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Erase(ctx context.Context, in *PressGetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPressServiceClient(cc grpc.ClientConnInterface) PressServiceClient {
	return &pressServiceClient{cc}
}

func (c *pressServiceClient) Add(ctx context.Context, in *PressAddRequest, opts ...grpc.CallOption) (*Press, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Press)
	err := c.cc.Invoke(ctx, PressService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pressServiceClient) Get(ctx context.Context, in *PressGetRequest, opts ...grpc.CallOption) (*Press, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Press)
	err := c.cc.Invoke(ctx, PressService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pressServiceClient) Patch(ctx context.Context, in *PressPatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PressService_Patch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pressServiceClient) Erase(ctx context.Context, in *PressGetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PressService_Erase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PressServiceServer is the server API for PressService service.
// All implementations must embed UnimplementedPressServiceServer
// for forward compatibility.
type PressServiceServer interface {
	Add(context.Context, *PressAddRequest) (*Press, error)
	Get(context.Context, *PressGetRequest) (*Press, error)
	Patch(context.Context, *PressPatchRequest) (*emptypb.Empty, error)
	Erase(context.Context, *PressGetRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPressServiceServer()
}

// UnimplementedPressServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPressServiceServer struct{}

func (UnimplementedPressServiceServer) Add(context.Context, *PressAddRequest) (*Press, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPressServiceServer) Get(context.Context, *PressGetRequest) (*Press, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPressServiceServer) Patch(context.Context, *PressPatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedPressServiceServer) Erase(context.Context, *PressGetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Erase not implemented")
}
func (UnimplementedPressServiceServer) mustEmbedUnimplementedPressServiceServer() {}
func (UnimplementedPressServiceServer) testEmbeddedByValue()                      {}

// UnsafePressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PressServiceServer will
// result in compilation errors.
type UnsafePressServiceServer interface {
	mustEmbedUnimplementedPressServiceServer()
}

func RegisterPressServiceServer(s grpc.ServiceRegistrar, srv PressServiceServer) {
	// If the following call pancis, it indicates UnimplementedPressServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PressService_ServiceDesc, srv)
}

func _PressService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PressAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PressServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PressService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PressServiceServer).Add(ctx, req.(*PressAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PressService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PressGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PressServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PressService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PressServiceServer).Get(ctx, req.(*PressGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PressService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PressPatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PressServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PressService_Patch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PressServiceServer).Patch(ctx, req.(*PressPatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PressService_Erase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PressGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PressServiceServer).Erase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PressService_Erase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PressServiceServer).Erase(ctx, req.(*PressGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PressService_ServiceDesc is the grpc.ServiceDesc for PressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.library.PressService",
	HandlerType: (*PressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _PressService_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PressService_Get_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _PressService_Patch_Handler,
		},
		{
			MethodName: "Erase",
			Handler:    _PressService_Erase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/library/press.svc.proto",
}
