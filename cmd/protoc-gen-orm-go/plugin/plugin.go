package plugin

import (
	"bytes"
	"errors"
	"fmt"
	"maps"
	"path/filepath"
	"slices"
	"strings"
	"text/template"

	"github.com/lesomnus/proto-orm/graph"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

type Plugin struct {
	Naming string
}

func NewPlugin() *Plugin {
	return &Plugin{}
}

func (p *Plugin) Run(plugin *protogen.Plugin) error {
	plugin.SupportedEditionsMinimum = descriptorpb.Edition_EDITION_PROTO3
	plugin.SupportedEditionsMaximum = descriptorpb.Edition_EDITION_PROTO3
	plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

	namer, err := template.New("naming").Parse(p.Naming)
	if err != nil {
		return fmt.Errorf(`invalid option value "naming=%s": %w`, p.Naming, err)
	}

	g, err := graph.NewGraph(plugin.Files)
	if err != nil {
		return fmt.Errorf("graph: %w", err)
	}

	es := slices.Collect(maps.Values(g))
	slices.SortFunc(es, func(a *graph.Entity, b *graph.Entity) int {
		return strings.Compare(a.Name(), b.Name())
	})

	fs := map[string]*protogen.GeneratedFile{}

	errs := []error{}
	for _, e := range es {
		if !e.File.Generate {
			continue
		}

		p_ := nameFile(namer, e)
		f, ok := fs[p_]
		if !ok {
			f = plugin.NewGeneratedFile(p_, e.File.GoImportPath)
			fs[p_] = f

			p.printPrelude(f)
			f.P("package ", e.File.GoPackageName)
			f.P("")
		}

		if err := p.Print(e, f); err != nil {
			err = fmt.Errorf("%s: %w", e.FullName(), err)
			errs = append(errs, err)
			continue
		}
	}
	if len(errs) > 0 {
		return errors.Join(errs...)
	}

	return nil
}

func (p *Plugin) printPrelude(f *protogen.GeneratedFile) {
	f.P(`// Code generated by "protoc-gen-orm-go", DO NOT EDIT.`)
	f.P("")
}

func nameFile(namer *template.Template, e *graph.Entity) string {
	d, _ := filepath.Split(e.File.GeneratedFilenamePrefix)

	b := &bytes.Buffer{}
	err := namer.Execute(b, nil)
	// err := namer.Execute(b, struct{ Name string }{Name: n})
	if err != nil {
		panic("namer")
	}

	return filepath.Join(d, b.String())
}
