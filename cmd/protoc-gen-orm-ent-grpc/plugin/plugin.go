package plugin

import (
	"bytes"
	"errors"
	"fmt"
	"path/filepath"
	"text/template"

	"github.com/lesomnus/proto-orm/graph"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

type Plugin struct {
	Graph  graph.Graph
	EntPkg protogen.GoImportPath
	Naming string
}

func NewPlugin() *Plugin {
	return &Plugin{
		Graph: graph.Graph{},
	}
}

func (p *Plugin) Run(plugin *protogen.Plugin) error {
	plugin.SupportedEditionsMinimum = descriptorpb.Edition_EDITION_PROTO3
	plugin.SupportedEditionsMaximum = descriptorpb.Edition_EDITION_PROTO3
	plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

	if p.EntPkg == "" {
		return errors.New(`"ent" option must be given`)
	}

	namer, err := template.New("naming").Parse(p.Naming)
	if err != nil {
		return fmt.Errorf(`invalid option value "naming=%s": %w`, p.Naming, err)
	}

	_ = namer

	g, err := graph.NewGraph(plugin.Files)
	if err != nil {
		return fmt.Errorf("graph: %w", err)
	}

	type pkg struct {
		d  string                // directory path where this package is
		i  protogen.GoImportPath // path to this package
		pb protogen.GoImportPath // path to package generated by protobuf
	}

	errs := []error{}
	pkgs := map[string]pkg{}

	// Generate gRPC server implementation for each entity.
	for _, e := range g {
		if !e.File.Generate {
			continue
		}

		d, n := filepath.Split(e.File.GeneratedFilenamePrefix)
		b := &bytes.Buffer{}
		if err := namer.Execute(b, struct{ Name string }{Name: n}); err != nil {
			return fmt.Errorf("%s: name a generated file: %w", e.File.GoPackageName, err)
		}

		pd := filepath.Join(d, "bare")
		pf := filepath.Join(pd, b.String())
		pi := e.File.GoImportPath + "/bare"
		pkgs[pd] = pkg{
			d:  pd,
			i:  pi,
			pb: e.File.GoImportPath,
		}

		f := plugin.NewGeneratedFile(pf, pi)
		p.printPrelude(f)

		printer := Printer{
			EntPkg: p.EntPkg,
			PbPkg:  e.File.GoImportPath,
		}
		if err := printer.Print(g, e, f); err != nil {
			err = fmt.Errorf("print %s: %w", e.FullName(), err)
			errs = append(errs, err)
		}
	}

	// Generate common codes for entity package.
	for _, pkg := range pkgs {
		b := &bytes.Buffer{}
		if err := namer.Execute(b, struct{ Name string }{Name: "misc"}); err != nil {
			return fmt.Errorf("name a file for common code: %w", err)
		}

		pf := filepath.Join(pkg.d, b.String())
		f := plugin.NewGeneratedFile(pf, pkg.i)
		p.printPrelude(f)

		printer := Printer{
			EntPkg: p.EntPkg,
			PbPkg:  pkg.pb,
		}
		t := printer.newTemplate(f)
		if err := t.ExecuteTemplate(f, "misc.go.tpl", nil); err != nil {
			err = fmt.Errorf(`print common code: %w`, err)
			errs = append(errs, err)
			continue
		}
	}

	if len(errs) > 0 {
		return errors.Join(errs...)
	}

	return nil
}

func (p *Plugin) printPrelude(f *protogen.GeneratedFile) {
	f.P(`// Code generated by "protoc-gen-orm-ent-grpc". DO NOT EDIT`)
	f.P("")
	f.P("package bare")
	f.P("")
}
